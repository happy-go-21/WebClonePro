{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a full-stack marketplace application called \"بازار افغانستان\" (Afghanistan Market) - an online marketplace for buying and selling various products including real estate, vehicles, electronics, and other goods. The application is built with a modern React frontend and Express.js backend, featuring a Persian/Dari language interface with RTL support.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **Routing**: Wouter for client-side routing with pages for Home, Products, and Post Ad\n- **State Management**: TanStack Query (React Query) for server state management\n- **UI Framework**: shadcn/ui components built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom Persian/RTL styling and glassmorphism design\n- **Language Support**: Persian/Dari with RTL text direction\n\n## Backend Architecture\n- **Framework**: Express.js with TypeScript\n- **API Design**: RESTful API endpoints for products, categories, and provinces\n- **Data Layer**: In-memory storage implementation with interface-based design for future database integration\n- **Build System**: ESBuild for server bundling, supports both development and production modes\n\n## Data Storage Architecture\n- **Current Implementation**: Memory-based storage using Maps for products, categories, and provinces\n- **Database Schema**: Drizzle ORM schema definitions prepared for PostgreSQL integration\n- **Schema Design**: \n  - Products table with fields for title, description, price, category, location, and images\n  - Categories table with name, icon, and product count\n  - Provinces table with name, icon, and population data\n\n## Component Structure\n- **Layout System**: Centralized layout component with top toolbar and main content area\n- **Feature Components**: \n  - CategoryCircles: Interactive category selection with visual icons\n  - ProvinceCircles: Location-based filtering interface\n  - ProductGrid: Responsive product display with search and filter capabilities\n  - MainHeader: Search interface with category and location filters\n- **UI Components**: Comprehensive shadcn/ui component library with consistent styling\n\n## Development Tools\n- **Type Safety**: Full TypeScript coverage across frontend and backend\n- **Code Quality**: Shared schema validation using Zod for type-safe API communication\n- **Development Experience**: Hot reload with Vite, integrated error handling and logging\n\n# External Dependencies\n\n## Frontend Dependencies\n- **UI Framework**: Radix UI components for accessible, unstyled components\n- **State Management**: TanStack React Query for server state and caching\n- **Styling**: Tailwind CSS for utility-first styling approach\n- **Forms**: React Hook Form with Hookform Resolvers for form validation\n- **Icons**: Lucide React for consistent iconography\n- **Build Tools**: Vite with React plugin for fast development and building\n\n## Backend Dependencies\n- **Database**: Neon Database serverless PostgreSQL (configured but not actively used)\n- **ORM**: Drizzle ORM for type-safe database operations and migrations\n- **Validation**: Zod for runtime type validation and schema generation\n- **Development**: tsx for TypeScript execution in development\n\n## Build and Deployment\n- **Package Manager**: npm with lock file for dependency consistency\n- **Build Process**: Vite for frontend bundling, ESBuild for server bundling\n- **Environment**: Configured for both development and production deployments\n- **Asset Management**: Static file serving with proper routing configuration","size_bytes":3655},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        arabic: [\"var(--font-arabic)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        fadeIn: {\n          from: { opacity: \"0\", transform: \"translateY(20px)\" },\n          to: { opacity: \"1\", transform: \"translateY(0)\" },\n        },\n        spin: {\n          from: { transform: \"rotate(0deg)\" },\n          to: { transform: \"rotate(360deg)\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fadeIn 0.5s ease-in\",\n        \"spin\": \"spin 1s linear infinite\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2464},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser, insertUserSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport rateLimit from \"express-rate-limit\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n    interface Session {\n      csrfToken?: string;\n    }\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\n// Generate CSRF token\nfunction generateCSRFToken(): string {\n  return randomBytes(32).toString('hex');\n}\n\n// Validate CSRF token\nfunction validateCSRFToken(sessionToken: string, requestToken: string): boolean {\n  if (!sessionToken || !requestToken) return false;\n  return timingSafeEqual(Buffer.from(sessionToken, 'hex'), Buffer.from(requestToken, 'hex'));\n}\n\n// CSRF protection middleware\nfunction csrfProtection(req: any, res: any, next: any) {\n  // Skip CSRF for GET, HEAD, OPTIONS\n  if (['GET', 'HEAD', 'OPTIONS'].includes(req.method)) {\n    return next();\n  }\n  \n  // Skip CSRF for login and register (they use rate limiting instead)\n  if (req.path === '/api/login' || req.path === '/api/register') {\n    return next();\n  }\n  \n  const sessionToken = req.session?.csrfToken;\n  const requestToken = req.headers['x-csrf-token'] || req.body._csrf;\n  \n  if (!validateCSRFToken(sessionToken, requestToken)) {\n    return res.status(403).json({ message: 'Invalid CSRF token' });\n  }\n  \n  next();\n}\n\n// Rate limiting for authentication endpoints\nconst authLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 5, // limit each IP to 5 requests per windowMs\n  message: { message: \"Too many attempts, please try again later.\" },\n  standardHeaders: true,\n  legacyHeaders: false,\n  skipSuccessfulRequests: true, // don't count successful requests\n});\n\nasync function hashPassword(password: string): Promise<string> {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string): Promise<boolean> {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\nexport function setupAuth(app: Express) {\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET || \"development-secret-change-in-production\",\n    resave: false,\n    saveUninitialized: false,\n    store: storage.sessionStore,\n    cookie: {\n      secure: process.env.NODE_ENV === \"production\",\n      httpOnly: true,\n      maxAge: 24 * 60 * 60 * 1000, // 24 hours\n      sameSite: 'lax', // CSRF protection\n    },\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n  \n  // CSRF protection middleware\n  app.use(csrfProtection);\n  \n  // Generate CSRF token for each session\n  app.use((req: any, res, next) => {\n    if (!req.session.csrfToken) {\n      req.session.csrfToken = generateCSRFToken();\n    }\n    next();\n  });\n  \n  // CSRF token endpoint\n  app.get('/api/csrf-token', (req: any, res) => {\n    res.json({ csrfToken: req.session.csrfToken });\n  });\n\n  passport.use(\n    new LocalStrategy(async (username, password, done) => {\n      try {\n        const user = await storage.getUserByUsername(username);\n        if (!user || !(await comparePasswords(password, user.password))) {\n          return done(null, false);\n        } else {\n          return done(null, user);\n        }\n      } catch (error) {\n        return done(error);\n      }\n    }),\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getUser(id);\n      done(null, user);\n    } catch (error) {\n      done(error);\n    }\n  });\n\n  // Registration endpoint with rate limiting\n  app.post(\"/api/register\", authLimiter, async (req, res, next) => {\n    try {\n      // Validate request body\n      const validatedData = insertUserSchema.parse(req.body);\n      \n      // Check if username already exists\n      const existingUser = await storage.getUserByUsername(validatedData.username);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Username already exists\" });\n      }\n\n      // Create user with hashed password\n      const user = await storage.createUser({\n        ...validatedData,\n        password: await hashPassword(validatedData.password),\n      });\n\n      // Auto-login after registration with session regeneration\n      req.login(user, (err) => {\n        if (err) return next(err);\n        \n        // Regenerate session to prevent fixation attacks\n        req.session.regenerate((regenerateErr) => {\n          if (regenerateErr) return next(regenerateErr);\n          \n          // Generate new CSRF token\n          req.session.csrfToken = generateCSRFToken();\n          \n          // Don't send password in response\n          const { password, ...userWithoutPassword } = user;\n          res.status(201).json(userWithoutPassword);\n        });\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Invalid data\", \n          errors: error.errors \n        });\n      }\n      next(error);\n    }\n  });\n\n  // Login endpoint with rate limiting\n  app.post(\"/api/login\", authLimiter, (req, res, next) => {\n    passport.authenticate(\"local\", (err: any, user: SelectUser, info: any) => {\n      if (err) return next(err);\n      \n      if (!user) {\n        return res.status(401).json({ message: \"Invalid username or password\" });\n      }\n\n      req.login(user, (err) => {\n        if (err) return next(err);\n        \n        // Regenerate session to prevent fixation attacks\n        req.session.regenerate((regenerateErr) => {\n          if (regenerateErr) return next(regenerateErr);\n          \n          // Generate new CSRF token\n          req.session.csrfToken = generateCSRFToken();\n          \n          // Don't send password in response\n          const { password, ...userWithoutPassword } = user;\n          res.status(200).json(userWithoutPassword);\n        });\n      });\n    })(req, res, next);\n  });\n\n  // Logout endpoint\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      \n      // Destroy session to prevent fixation attacks\n      req.session.destroy((destroyErr) => {\n        if (destroyErr) return next(destroyErr);\n        res.clearCookie('connect.sid'); // Clear session cookie\n        res.status(200).json({ message: \"Successfully logged out\" });\n      });\n    });\n  });\n\n  // Get current user endpoint\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n    \n    // Don't send password in response\n    const { password, ...userWithoutPassword } = req.user!;\n    res.json(userWithoutPassword);\n  });\n\n  // Change password endpoint\n  app.post(\"/api/change-password\", async (req, res, next) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n\n    try {\n      const { currentPassword, newPassword } = req.body;\n      \n      if (!currentPassword || !newPassword) {\n        return res.status(400).json({ message: \"Current and new password required\" });\n      }\n\n      // Verify current password\n      const user = await storage.getUser(req.user!.id);\n      if (!user || !(await comparePasswords(currentPassword, user.password))) {\n        return res.status(400).json({ message: \"Current password is incorrect\" });\n      }\n\n      // Update password\n      await storage.updateUser(user.id, {\n        password: await hashPassword(newPassword),\n      });\n\n      res.json({ message: \"Password changed successfully\" });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Update user profile endpoint\n  app.patch(\"/api/user\", async (req, res, next) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n\n    try {\n      const allowedFields = [\"phoneNumber\"];\n      const updates: any = {};\n      \n      for (const field of allowedFields) {\n        if (req.body[field] !== undefined) {\n          updates[field] = req.body[field];\n        }\n      }\n\n      if (Object.keys(updates).length === 0) {\n        return res.status(400).json({ message: \"No fields to update\" });\n      }\n\n      const updatedUser = await storage.updateUser(req.user!.id, updates);\n      \n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Don't send password in response\n      const { password, ...userWithoutPassword } = updatedUser;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      next(error);\n    }\n  });\n}\n","size_bytes":9158},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { setupAuth } from \"./auth\";\nimport { insertProductSchema, insertConversationSchema, insertMessageSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup authentication\n  setupAuth(app);\n\n  // Product routes\n  app.get(\"/api/products\", async (req, res) => {\n    try {\n      const filters = {\n        search: req.query.search as string,\n        category: req.query.category as string,\n        location: req.query.location as string,\n        limit: req.query.limit ? parseInt(req.query.limit as string) : undefined,\n      };\n      \n      const products = await storage.getProducts(filters);\n      res.json(products);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  app.get(\"/api/products/:id\", async (req, res) => {\n    try {\n      const product = await storage.getProduct(req.params.id);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch product\" });\n    }\n  });\n\n  app.post(\"/api/products\", async (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n\n    try {\n      const validatedData = insertProductSchema.parse(req.body);\n      const product = await storage.createProduct({\n        ...validatedData,\n        userId: req.user!.id,\n      });\n      res.status(201).json(product);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid product data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create product\" });\n    }\n  });\n\n  app.get(\"/api/latest-ad\", async (req, res) => {\n    try {\n      const latestProduct = await storage.getLatestProduct();\n      res.json(latestProduct);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch latest ad\" });\n    }\n  });\n\n  // Category routes\n  app.get(\"/api/categories\", async (req, res) => {\n    try {\n      const categories = await storage.getCategories();\n      res.json(categories);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch categories\" });\n    }\n  });\n\n  // Province routes\n  app.get(\"/api/provinces\", async (req, res) => {\n    try {\n      const provinces = await storage.getProvinces();\n      res.json(provinces);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch provinces\" });\n    }\n  });\n\n  // Conversation routes\n  app.get(\"/api/conversations\", async (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n\n    try {\n      const conversations = await storage.getConversations(req.user!.id);\n      res.json(conversations);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch conversations\" });\n    }\n  });\n\n  app.post(\"/api/conversations\", async (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n\n    try {\n      const validatedData = insertConversationSchema.parse(req.body);\n      const conversation = await storage.createConversation(validatedData);\n      res.status(201).json(conversation);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid conversation data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create conversation\" });\n    }\n  });\n\n  // Message routes\n  app.get(\"/api/conversations/:id/messages\", async (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n\n    try {\n      const messages = await storage.getMessages(req.params.id);\n      res.json(messages);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch messages\" });\n    }\n  });\n\n  app.post(\"/api/conversations/:id/messages\", async (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n\n    try {\n      const validatedData = insertMessageSchema.parse({\n        ...req.body,\n        conversationId: req.params.id,\n        senderId: req.user!.id,\n      });\n      \n      const message = await storage.createMessage(validatedData);\n      \n      // Broadcast message to WebSocket clients\n      wss.clients.forEach((client) => {\n        if (client.readyState === WebSocket.OPEN) {\n          client.send(JSON.stringify({\n            type: 'new_message',\n            message: message,\n          }));\n        }\n      });\n      \n      res.status(201).json(message);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid message data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to send message\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  // WebSocket server for real-time messaging\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n\n  wss.on('connection', (ws) => {\n    console.log('New WebSocket connection');\n\n    ws.on('message', async (data) => {\n      try {\n        const parsed = JSON.parse(data.toString());\n        \n        if (parsed.type === 'join_conversation') {\n          // Join conversation room (in a real app, you'd manage rooms)\n          ws.conversationId = parsed.conversationId;\n        }\n      } catch (error) {\n        console.error('WebSocket message error:', error);\n      }\n    });\n\n    ws.on('close', () => {\n      console.log('WebSocket connection closed');\n    });\n  });\n\n  return httpServer;\n}\n","size_bytes":5987},"server/storage.ts":{"content":"import { type User, type InsertUser, type Category, type Province, type Product, type InsertProduct, type Conversation, type InsertConversation, type Message, type InsertMessage, users, categories, provinces, products, conversations, messages } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, or, ilike, count, sql } from \"drizzle-orm\";\nimport session from \"express-session\";\nimport connectPgSimple from \"connect-pg-simple\";\n\nexport interface IStorage {\n  // Session store for auth\n  sessionStore: any;\n  \n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User | undefined>;\n  \n  // Category methods\n  getCategories(): Promise<Category[]>;\n  getCategory(id: string): Promise<Category | undefined>;\n  \n  // Province methods\n  getProvinces(): Promise<Province[]>;\n  getProvince(id: string): Promise<Province | undefined>;\n  \n  // Product methods\n  getProducts(filters?: { search?: string; category?: string; location?: string; limit?: number }): Promise<Product[]>;\n  getProduct(id: string): Promise<Product | undefined>;\n  createProduct(product: InsertProduct & { userId: string }): Promise<Product>;\n  updateProduct(id: string, updates: Partial<Product>): Promise<Product | undefined>;\n  getLatestProduct(): Promise<Product | null>;\n  \n  // Conversation methods\n  getConversations(userId: string): Promise<Conversation[]>;\n  getConversation(id: string): Promise<Conversation | undefined>;\n  createConversation(conversation: InsertConversation): Promise<Conversation>;\n  \n  // Message methods\n  getMessages(conversationId: string): Promise<Message[]>;\n  createMessage(message: InsertMessage): Promise<Message>;\n  markMessagesAsRead(conversationId: string, userId: string): Promise<void>;\n  \n  // Product count management\n  updateProductCounts(): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  sessionStore: any;\n\n  constructor() {\n    // Initialize session store using PostgreSQL\n    const PostgresSessionStore = connectPgSimple(session);\n    this.sessionStore = new PostgresSessionStore({\n      conString: process.env.DATABASE_URL,\n      createTableIfMissing: true,\n    });\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const [user] = await db\n      .update(users)\n      .set(updates)\n      .where(eq(users.id, id))\n      .returning();\n    return user || undefined;\n  }\n\n  async getProducts(filters?: { search?: string; category?: string; location?: string; limit?: number }): Promise<Product[]> {\n    let conditions = [eq(products.isActive, true)];\n    \n    if (filters?.search) {\n      // Search in both title and description with case-insensitive matching\n      const searchTerm = `%${filters.search}%`;\n      conditions.push(\n        or(\n          ilike(products.title, searchTerm),\n          ilike(products.description, searchTerm)\n        )\n      );\n    }\n    \n    if (filters?.category) {\n      conditions.push(eq(products.category, filters.category));\n    }\n    \n    if (filters?.location) {\n      conditions.push(eq(products.location, filters.location));\n    }\n    \n    let query = db.select().from(products).where(and(...conditions)).orderBy(desc(products.createdAt));\n    \n    if (filters?.limit) {\n      query = query.limit(filters.limit);\n    }\n    \n    return await query;\n  }\n\n  async getProduct(id: string): Promise<Product | undefined> {\n    const [product] = await db.select().from(products).where(eq(products.id, id));\n    return product || undefined;\n  }\n\n  async createProduct(product: InsertProduct & { userId: string }): Promise<Product> {\n    const [newProduct] = await db\n      .insert(products)\n      .values([product])\n      .returning();\n    \n    // Update product counts after creating a new product\n    await this.updateProductCounts();\n    \n    return newProduct;\n  }\n\n  async updateProduct(id: string, updates: Partial<Product>): Promise<Product | undefined> {\n    const [product] = await db\n      .update(products)\n      .set(updates)\n      .where(eq(products.id, id))\n      .returning();\n    return product || undefined;\n  }\n\n  async getLatestProduct(): Promise<Product | null> {\n    const [product] = await db\n      .select()\n      .from(products)\n      .where(eq(products.isActive, true))\n      .orderBy(desc(products.createdAt))\n      .limit(1);\n    return product || null;\n  }\n\n  async getConversations(userId: string): Promise<Conversation[]> {\n    return await db\n      .select()\n      .from(conversations)\n      .where(or(eq(conversations.buyerId, userId), eq(conversations.sellerId, userId)))\n      .orderBy(desc(conversations.createdAt));\n  }\n\n  async getConversation(id: string): Promise<Conversation | undefined> {\n    const [conversation] = await db.select().from(conversations).where(eq(conversations.id, id));\n    return conversation || undefined;\n  }\n\n  async createConversation(conversation: InsertConversation): Promise<Conversation> {\n    const [newConversation] = await db\n      .insert(conversations)\n      .values([conversation])\n      .returning();\n    return newConversation;\n  }\n\n  async getMessages(conversationId: string): Promise<Message[]> {\n    return await db\n      .select()\n      .from(messages)\n      .where(eq(messages.conversationId, conversationId))\n      .orderBy(messages.createdAt);\n  }\n\n  async createMessage(message: InsertMessage): Promise<Message> {\n    const [newMessage] = await db\n      .insert(messages)\n      .values([message])\n      .returning();\n    return newMessage;\n  }\n\n  async markMessagesAsRead(conversationId: string, userId: string): Promise<void> {\n    await db\n      .update(messages)\n      .set({ isRead: true })\n      .where(\n        and(\n          eq(messages.conversationId, conversationId),\n          eq(messages.senderId, userId)\n        )\n      );\n  }\n\n  async getCategories(): Promise<Category[]> {\n    return await db.select().from(categories).orderBy(categories.name);\n  }\n\n  async getCategory(id: string): Promise<Category | undefined> {\n    const [category] = await db.select().from(categories).where(eq(categories.id, id));\n    return category || undefined;\n  }\n\n  async getProvinces(): Promise<Province[]> {\n    return await db.select().from(provinces).orderBy(provinces.name);\n  }\n\n  async getProvince(id: string): Promise<Province | undefined> {\n    const [province] = await db.select().from(provinces).where(eq(provinces.id, id));\n    return province || undefined;\n  }\n\n  async updateProductCounts(): Promise<void> {\n    // Update category product counts\n    const categoryCountsQuery = db\n      .select({\n        category: products.category,\n        count: count(products.id).as('count')\n      })\n      .from(products)\n      .where(eq(products.isActive, true))\n      .groupBy(products.category);\n    \n    const categoryCounts = await categoryCountsQuery;\n    \n    for (const categoryCount of categoryCounts) {\n      await db\n        .update(categories)\n        .set({ productCount: Number(categoryCount.count) })\n        .where(eq(categories.name, categoryCount.category));\n    }\n\n    // Update province product counts\n    const provinceCountsQuery = db\n      .select({\n        location: products.location,\n        count: count(products.id).as('count')\n      })\n      .from(products)\n      .where(eq(products.isActive, true))\n      .groupBy(products.location);\n    \n    const provinceCounts = await provinceCountsQuery;\n    \n    for (const provinceCount of provinceCounts) {\n      await db\n        .update(provinces)\n        .set({ productCount: Number(provinceCount.count) })\n        .where(eq(provinces.name, provinceCount.location));\n    }\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":8331},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, boolean, integer, jsonb } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  phoneNumber: text(\"phone_number\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const categories = pgTable(\"categories\", {\n  id: varchar(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  icon: text(\"icon\").notNull(),\n  description: text(\"description\"),\n  productCount: integer(\"product_count\").default(0),\n});\n\nexport const provinces = pgTable(\"provinces\", {\n  id: varchar(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  productCount: integer(\"product_count\").default(0),\n});\n\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  price: text(\"price\").notNull(),\n  category: text(\"category\").notNull(),\n  location: text(\"location\").notNull(),\n  images: jsonb(\"images\").$type<string[]>().default([]),\n  isActive: boolean(\"is_active\").default(true),\n  userId: varchar(\"user_id\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const conversations = pgTable(\"conversations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  buyerId: varchar(\"buyer_id\").notNull().references(() => users.id),\n  sellerId: varchar(\"seller_id\").notNull().references(() => users.id),\n  productId: varchar(\"product_id\").references(() => products.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const messages = pgTable(\"messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  conversationId: varchar(\"conversation_id\").notNull().references(() => conversations.id),\n  senderId: varchar(\"sender_id\").notNull().references(() => users.id),\n  content: text(\"content\").notNull(),\n  isRead: boolean(\"is_read\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  products: many(products),\n  sentMessages: many(messages),\n  buyerConversations: many(conversations, { relationName: \"buyer\" }),\n  sellerConversations: many(conversations, { relationName: \"seller\" }),\n}));\n\nexport const productsRelations = relations(products, ({ one, many }) => ({\n  user: one(users, { fields: [products.userId], references: [users.id] }),\n  conversations: many(conversations),\n}));\n\nexport const conversationsRelations = relations(conversations, ({ one, many }) => ({\n  buyer: one(users, { fields: [conversations.buyerId], references: [users.id], relationName: \"buyer\" }),\n  seller: one(users, { fields: [conversations.sellerId], references: [users.id], relationName: \"seller\" }),\n  product: one(products, { fields: [conversations.productId], references: [products.id] }),\n  messages: many(messages),\n}));\n\nexport const messagesRelations = relations(messages, ({ one }) => ({\n  conversation: one(conversations, { fields: [messages.conversationId], references: [conversations.id] }),\n  sender: one(users, { fields: [messages.senderId], references: [users.id] }),\n}));\n\n// Schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n  phoneNumber: true,\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n});\n\nexport const insertConversationSchema = createInsertSchema(conversations).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMessageSchema = createInsertSchema(messages).omit({\n  id: true,\n  createdAt: true,\n  isRead: true,\n});\n\nexport const insertCategorySchema = createInsertSchema(categories);\n\nexport const insertProvinceSchema = createInsertSchema(provinces);\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Category = typeof categories.$inferSelect;\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\nexport type Province = typeof provinces.$inferSelect;\nexport type InsertProvince = z.infer<typeof insertProvinceSchema>;\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type Conversation = typeof conversations.$inferSelect;\nexport type InsertConversation = z.infer<typeof insertConversationSchema>;\nexport type Message = typeof messages.$inferSelect;\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\n","size_bytes":4803},"client/src/App.tsx":{"content":"import { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { Router, Route, Switch } from \"wouter\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { LanguageProvider } from \"@/hooks/useLanguage\";\nimport Header from \"@/components/Header\";\nimport BackButton from \"@/components/BackButton\";\nimport Home from \"@/pages/Home\";\nimport Products from \"@/pages/Products\";\nimport PostAd from \"@/pages/PostAd\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport NotFound from \"@/pages/not-found\";\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      refetchOnWindowFocus: false,\n      staleTime: 5 * 60 * 1000, // 5 minutes\n      retry: false,\n    },\n  },\n});\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <LanguageProvider>\n        <Router>\n          <div className=\"min-h-screen bg-background\">\n            <Header />\n            <BackButton />\n            <main className=\"container mx-auto px-4 py-8\">\n              <Switch>\n                <Route path=\"/\" component={Home} />\n                <Route path=\"/products\" component={Products} />\n                <Route path=\"/post-ad\" component={PostAd} />\n                <Route path=\"/dashboard\" component={Dashboard} />\n                <Route component={NotFound} />\n              </Switch>\n            </main>\n            <Toaster />\n          </div>\n        </Router>\n      </LanguageProvider>\n    </QueryClientProvider>\n  );\n}\n","size_bytes":1480},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Noto+Sans+Arabic:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 98%);\n  --foreground: hsl(224 71% 4%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(224 71% 4%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(224 71% 4%);\n  --primary: hsl(158 64% 52%);\n  --primary-foreground: hsl(0 0% 98%);\n  --secondary: hsl(43 96% 56%);\n  --secondary-foreground: hsl(220 9% 46%);\n  --muted: hsl(220 14% 96%);\n  --muted-foreground: hsl(220 9% 46%);\n  --accent: hsl(220 14% 96%);\n  --accent-foreground: hsl(220 9% 46%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(0 0% 98%);\n  --border: hsl(220 13% 91%);\n  --input: hsl(220 13% 91%);\n  --ring: hsl(158 64% 52%);\n  --font-sans: 'Inter', sans-serif;\n  --font-arabic: 'Noto Sans Arabic', sans-serif;\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(224 71% 4%);\n  --foreground: hsl(0 0% 98%);\n  --card: hsl(224 71% 8%);\n  --card-foreground: hsl(0 0% 95%);\n  --popover: hsl(224 71% 8%);\n  --popover-foreground: hsl(0 0% 95%);\n  --primary: hsl(158 64% 52%);\n  --primary-foreground: hsl(0 0% 98%);\n  --secondary: hsl(43 96% 56%);\n  --secondary-foreground: hsl(220 9% 46%);\n  --muted: hsl(224 71% 12%);\n  --muted-foreground: hsl(220 9% 70%);\n  --accent: hsl(224 71% 12%);\n  --accent-foreground: hsl(220 9% 70%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(0 0% 98%);\n  --border: hsl(224 71% 16%);\n  --input: hsl(224 71% 16%);\n  --ring: hsl(158 64% 52%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n  }\n\n  html {\n    scroll-behavior: smooth;\n  }\n\n  /* RTL Support */\n  [dir=\"rtl\"] {\n    direction: rtl;\n  }\n\n  [dir=\"rtl\"] .rtl\\:space-x-reverse > :not([hidden]) ~ :not([hidden]) {\n    --tw-space-x-reverse: 1;\n  }\n\n  /* Arabic/Persian font styling */\n  .arabic-font {\n    font-family: var(--font-arabic);\n  }\n\n  /* Custom components */\n  .message-bubble-sent {\n    background: linear-gradient(135deg, var(--primary) 0%, hsl(158 64% 45%) 100%);\n  }\n\n  .message-bubble-received {\n    background: var(--muted);\n  }\n\n  .product-card {\n    transition: all 0.3s ease;\n  }\n\n  .product-card:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1);\n  }\n\n  .nav-link {\n    transition: color 0.3s ease;\n  }\n\n  .nav-link:hover {\n    color: var(--primary);\n  }\n\n  /* Mobile menu animations */\n  @media (max-width: 768px) {\n    .mobile-menu {\n      transform: translateX(-100%);\n      transition: transform 0.3s ease;\n    }\n    \n    .mobile-menu.open {\n      transform: translateX(0);\n    }\n  }\n\n  /* Glass morphism effect */\n  .glassmorphism {\n    background: rgba(255, 255, 255, 0.1);\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n  }\n\n  /* Golden border effect */\n  .golden-border {\n    border: 2px solid;\n    border-image: linear-gradient(45deg, #ffd700, #ffed4e, #ffd700) 1;\n  }\n\n  /* Text shadow for better readability */\n  .text-shadow {\n    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);\n  }\n\n  /* Loading spinner */\n  .loading-spinner {\n    border: 2px solid var(--muted);\n    border-top: 2px solid var(--primary);\n    border-radius: 50%;\n    width: 20px;\n    height: 20px;\n    animation: spin 1s linear infinite;\n  }\n\n  @keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n  }\n\n  /* Fade in animation */\n  .fade-in {\n    animation: fadeIn 0.5s ease-in;\n  }\n\n  @keyframes fadeIn {\n    from { opacity: 0; transform: translateY(20px); }\n    to { opacity: 1; transform: translateY(0); }\n  }\n\n  /* Custom scrollbar */\n  ::-webkit-scrollbar {\n    width: 8px;\n  }\n\n  ::-webkit-scrollbar-track {\n    background: var(--muted);\n  }\n\n  ::-webkit-scrollbar-thumb {\n    background: var(--primary);\n    border-radius: 4px;\n  }\n\n  ::-webkit-scrollbar-thumb:hover {\n    background: hsl(158 64% 45%);\n  }\n}\n","size_bytes":4045},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/CategoryCircles.tsx":{"content":"import { Link } from \"wouter\";\nimport { useLanguage } from \"@/hooks/useLanguage\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Category } from \"@shared/schema\";\n\nexport default function CategoryCircles() {\n  const { t } = useLanguage();\n\n  const { data: categories = [], isLoading } = useQuery<Category[]>({\n    queryKey: ['/api/categories'],\n  });\n\n  if (isLoading) {\n    return (\n      <section className=\"py-16 bg-card\">\n        <div className=\"container mx-auto px-4\">\n          <h2 className=\"text-3xl font-bold text-center mb-12\">{t(\"shopByCategory\")}</h2>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-6\">\n            {[...Array(8)].map((_, i) => (\n              <div key={i} className=\"text-center animate-pulse\">\n                <div className=\"w-20 h-20 mx-auto bg-muted rounded-full mb-4\"></div>\n                <div className=\"h-4 bg-muted rounded mb-2\"></div>\n                <div className=\"h-3 bg-muted rounded\"></div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section className=\"py-16 bg-card\">\n      <div className=\"container mx-auto px-4\">\n        <h2 className=\"text-3xl font-bold text-center mb-12\">{t(\"shopByCategory\")}</h2>\n        <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-6\">\n          {categories.map((category) => (\n            <Link\n              key={category.id}\n              href={`/products?category=${encodeURIComponent(category.name)}`}\n              className=\"text-center group cursor-pointer no-underline\"\n              data-testid={`category-${category.id}`}\n            >\n              <div className=\"w-20 h-20 mx-auto bg-gradient-to-br from-primary to-secondary rounded-full flex items-center justify-center mb-4 group-hover:scale-110 transition-transform\">\n                <i className={`${category.icon} text-2xl text-white`}></i>\n              </div>\n              <h3 className=\"font-semibold text-foreground\">{category.name}</h3>\n              <p className=\"text-sm text-muted-foreground\">{category.description}</p>\n              <p className=\"text-xs text-primary font-medium\">{category.productCount} {t(\"productsText\")}</p>\n            </Link>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2303},"client/src/components/Layout.tsx":{"content":"import { ReactNode } from \"react\";\nimport TopToolsBar from \"@/components/TopToolsBar\";\n\ninterface LayoutProps {\n  children: ReactNode;\n}\n\nexport default function Layout({ children }: LayoutProps) {\n  return (\n    <div className=\"min-h-screen p-5\">\n      <TopToolsBar />\n      <main className=\"max-w-7xl mx-auto\">\n        {children}\n      </main>\n    </div>\n  );\n}\n","size_bytes":364},"client/src/components/MainHeader.tsx":{"content":"export default function MainHeader() {\n  return (\n    <div className=\"glassmorphism rounded-xl p-6 mb-8 shadow-2xl\">\n      <h1 className=\"text-3xl font-bold text-center text-white mb-2 text-shadow\">\n        🏪 بازار افغانستان\n      </h1>\n    </div>\n  );\n}\n","size_bytes":272},"client/src/components/ProductGrid.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport ProductCard from \"./ProductCard\";\nimport type { Product } from \"@shared/schema\";\nimport { useLanguage } from \"@/hooks/useLanguage\";\n\ninterface ProductGridProps {\n  searchQuery?: string;\n  category?: string;\n  location?: string;\n  limit?: number;\n  title?: string;\n}\n\nexport default function ProductGrid({ searchQuery, category, location, limit, title }: ProductGridProps) {\n  const { t } = useLanguage();\n\n  const { data: products = [], isLoading, error } = useQuery<Product[]>({\n    queryKey: [\"/api/products\", { search: searchQuery, category, location, limit }],\n  });\n\n  if (error) {\n    return (\n      <div className=\"bg-card rounded-lg p-8 shadow-md border border-border\">\n        <div className=\"text-center\">\n          <i className=\"fas fa-exclamation-triangle text-4xl text-destructive mb-4\"></i>\n          <h3 className=\"text-lg font-semibold text-foreground mb-2\">{t(\"error\")}</h3>\n          <p className=\"text-muted-foreground\">{t(\"failedToLoadProducts\")}</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-card rounded-lg p-6 shadow-md border border-border\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h2 className=\"text-2xl font-bold text-foreground\">\n          {title || t(\"featuredProducts\")}\n        </h2>\n        {products.length > 0 && (\n          <span className=\"text-sm text-muted-foreground\" data-testid=\"products-count\">\n            {products.length} {t(\"productsFound\")}\n          </span>\n        )}\n      </div>\n\n      {isLoading ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {Array.from({ length: limit || 8 }).map((_, index) => (\n            <div key={index} className=\"bg-muted rounded-lg h-64 animate-pulse\" data-testid={`skeleton-${index}`} />\n          ))}\n        </div>\n      ) : products.length === 0 ? (\n        <div className=\"text-center py-12\">\n          <i className=\"fas fa-search text-6xl text-muted-foreground mb-4\"></i>\n          <h3 className=\"text-lg font-semibold text-foreground mb-2\">{t(\"noProductsFound\")}</h3>\n          <p className=\"text-muted-foreground\">{t(\"tryDifferentSearch\")}</p>\n        </div>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {products.map((product) => (\n            <ProductCard \n              key={product.id} \n              product={product}\n              onClick={() => {\n                // TODO: Navigate to product detail page\n                console.log(\"Product clicked:\", product.id);\n              }}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":2669},"client/src/components/ProvinceCircles.tsx":{"content":"import { Link } from \"wouter\";\nimport { useLanguage } from \"@/hooks/useLanguage\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Province } from \"@shared/schema\";\n\nexport default function ProvinceCircles() {\n  const { t } = useLanguage();\n\n  const { data: provinces = [], isLoading } = useQuery<Province[]>({\n    queryKey: ['/api/provinces'],\n  });\n\n  if (isLoading) {\n    return (\n      <section className=\"py-16 bg-muted/30\">\n        <div className=\"container mx-auto px-4\">\n          <h2 className=\"text-3xl font-bold text-center mb-12\">{t(\"exploreByProvince\")}</h2>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4\">\n            {[...Array(12)].map((_, i) => (\n              <div key={i} className=\"bg-card rounded-lg p-4 text-center animate-pulse relative\">\n                <div className=\"absolute -top-2 -right-2 w-6 h-6 bg-muted rounded-full\"></div>\n                <div className=\"h-4 bg-muted rounded mb-2\"></div>\n                <div className=\"h-3 bg-muted rounded\"></div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section className=\"py-16 bg-muted/30\">\n      <div className=\"container mx-auto px-4\">\n        <h2 className=\"text-3xl font-bold text-center mb-12\">{t(\"exploreByProvince\")}</h2>\n        <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4\">\n          {provinces.map((province) => (\n            <Link\n              key={province.id}\n              href={`/products?location=${encodeURIComponent(province.name)}`}\n              className=\"bg-card rounded-lg p-4 text-center hover:shadow-md transition-shadow cursor-pointer no-underline relative\"\n              data-testid={`province-${province.id}`}\n            >\n              {/* Province Badge/Sticker */}\n              <div className=\"absolute -top-2 -right-2 bg-primary text-primary-foreground text-xs font-bold px-2 py-1 rounded-full shadow-md\">\n                {province.productCount}\n              </div>\n              <h3 className=\"font-semibold text-foreground\">{province.name}</h3>\n              <p className=\"text-sm text-muted-foreground\">{province.productCount} {t(\"productsText\")}</p>\n            </Link>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2293},"client/src/components/TopToolsBar.tsx":{"content":"export default function TopToolsBar() {\n  return (\n    <div className=\"fixed top-4 left-4 flex gap-2 z-50\">\n      <button \n        className=\"glassmorphism px-4 py-2 rounded-full text-white font-bold hover:bg-white/20 transition-all duration-300 golden-border\"\n        data-testid=\"button-language\"\n      >\n        🌍 زبان\n      </button>\n      <button \n        className=\"glassmorphism px-4 py-2 rounded-full text-white font-bold hover:bg-white/20 transition-all duration-300 golden-border\"\n        data-testid=\"button-theme\"\n      >\n        🌙 حالت شب\n      </button>\n      <button \n        className=\"glassmorphism px-4 py-2 rounded-full text-white font-bold hover:bg-white/20 transition-all duration-300 golden-border\"\n        data-testid=\"button-login\"\n      >\n        👤 ورود\n      </button>\n      <div \n        className=\"glassmorphism px-3 py-2 rounded-full text-xs bg-green-500/30\"\n        data-testid=\"text-user-status\"\n      >\n        کاربر: مهمان\n      </div>\n    </div>\n  );\n}\n","size_bytes":1020},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\n// Cache for CSRF token to avoid multiple requests\nlet csrfTokenCache: string | null = null;\nlet csrfTokenPromise: Promise<string> | null = null;\n\nasync function getCSRFToken(): Promise<string> {\n  // If we already have a token, return it\n  if (csrfTokenCache) {\n    return csrfTokenCache;\n  }\n  \n  // If there's already a request in flight, wait for it\n  if (csrfTokenPromise) {\n    return csrfTokenPromise;\n  }\n  \n  // Fetch CSRF token\n  csrfTokenPromise = fetch('/api/csrf-token', {\n    credentials: 'include',\n  })\n  .then(res => {\n    if (!res.ok) {\n      throw new Error('Failed to get CSRF token');\n    }\n    return res.json();\n  })\n  .then(data => {\n    csrfTokenCache = data.csrfToken;\n    csrfTokenPromise = null;\n    return data.csrfToken;\n  })\n  .catch(error => {\n    csrfTokenPromise = null;\n    throw error;\n  });\n  \n  return csrfTokenPromise;\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const headers: HeadersInit = {\n    ...(data ? { \"Content-Type\": \"application/json\" } : {})\n  };\n\n  // Add CSRF token for non-GET requests\n  if (method !== 'GET' && method !== 'HEAD' && method !== 'OPTIONS') {\n    try {\n      const csrfToken = await getCSRFToken();\n      headers['X-CSRF-Token'] = csrfToken;\n    } catch (error) {\n      console.error('Failed to get CSRF token:', error);\n      throw new Error('Failed to get CSRF token');\n    }\n  }\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  // If we get a 403, clear the CSRF token cache and retry once\n  if (res.status === 403 && method !== 'GET') {\n    csrfTokenCache = null;\n    try {\n      const csrfToken = await getCSRFToken();\n      const retryRes = await fetch(url, {\n        method,\n        headers: {\n          ...headers,\n          'X-CSRF-Token': csrfToken,\n        },\n        body: data ? JSON.stringify(data) : undefined,\n        credentials: \"include\",\n      });\n      \n      await throwIfResNotOk(retryRes);\n      return retryRes;\n    } catch (retryError) {\n      console.error('Retry with fresh CSRF token failed:', retryError);\n    }\n  }\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":3261},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Home.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport CategoryCircles from \"@/components/CategoryCircles\";\nimport ProvinceCircles from \"@/components/ProvinceCircles\";\nimport ProductGrid from \"@/components/ProductGrid\";\nimport { Button } from \"@/components/ui/button\";\nimport { useLanguage } from \"@/hooks/useLanguage\";\nimport type { Product } from \"@shared/schema\";\n\nexport default function Home() {\n  const { t } = useLanguage();\n\n  const { data: latestAd } = useQuery<Product | null>({\n    queryKey: [\"/api/latest-ad\"],\n  });\n\n  return (\n    <div className=\"space-y-16\">\n      {/* Hero Section */}\n      <section className=\"bg-gradient-to-br from-primary/10 to-secondary/10 py-16 rounded-xl\">\n        <div className=\"text-center\">\n          <h1 className=\"text-4xl md:text-6xl font-bold text-foreground mb-6\">\n            {t(\"heroTitle1\")}\n            <span className=\"text-primary block\">{t(\"heroTitle2\")}</span>\n          </h1>\n          <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\">\n            {t(\"heroDescription\")}\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Link href=\"/products\">\n              <Button size=\"lg\" className=\"px-8 py-3\" data-testid=\"button-explore-products\">\n                <i className=\"fas fa-search mr-2\"></i>\n                {t(\"exploreProducts\")}\n              </Button>\n            </Link>\n            <Link href=\"/post-ad\">\n              <Button variant=\"outline\" size=\"lg\" className=\"px-8 py-3\" data-testid=\"button-start-selling\">\n                <i className=\"fas fa-store mr-2\"></i>\n                {t(\"startSelling\")}\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      <CategoryCircles />\n\n      {/* Featured Products */}\n      <ProductGrid limit={4} title={t(\"featuredProducts\")} />\n\n      {/* Latest Ad */}\n      {latestAd && (\n        <section className=\"bg-card rounded-xl p-6 shadow-md border border-border\">\n          <h2 className=\"text-2xl font-bold text-foreground mb-6 border-b border-border pb-2\">\n            {t(\"latestAd\")}\n          </h2>\n          \n          <div className=\"flex justify-center\">\n            <div className=\"bg-gradient-to-br from-primary/5 to-secondary/5 rounded-xl p-8 text-center max-w-md w-full border border-primary/20\">\n              <h3 className=\"text-2xl font-bold text-foreground mb-3\" data-testid=\"text-latest-title\">\n                {latestAd.title}\n              </h3>\n              <div className=\"text-xl text-primary font-bold mb-3\" data-testid=\"text-latest-price\">\n                {latestAd.price}\n              </div>\n              <div className=\"text-muted-foreground mb-4\" data-testid=\"text-latest-location\">\n                📍 {latestAd.location}\n              </div>\n              <p className=\"text-muted-foreground leading-relaxed\" data-testid=\"text-latest-description\">\n                {latestAd.description}\n              </p>\n            </div>\n          </div>\n        </section>\n      )}\n\n      <ProvinceCircles />\n\n      {/* About Section */}\n      <section className=\"bg-card rounded-xl p-8 shadow-md border border-border\">\n        <h2 className=\"text-2xl font-bold text-foreground mb-6 border-b border-border pb-2\">\n          {t(\"aboutTitle\")}\n        </h2>\n        <div className=\"space-y-4 text-muted-foreground leading-relaxed\">\n          <p>{t(\"aboutDescription1\")}</p>\n          <p>{t(\"aboutDescription2\")}</p>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-card rounded-xl p-8 border border-border\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 mb-8\">\n          <div>\n            <h3 className=\"text-lg font-bold text-foreground mb-4\">{t(\"aboutUs\")}</h3>\n            <p className=\"text-sm text-muted-foreground leading-relaxed\">\n              {t(\"footerDescription\")}\n            </p>\n          </div>\n          \n          <div>\n            <h3 className=\"text-lg font-bold text-foreground mb-4\">{t(\"contactUs\")}</h3>\n            <div className=\"text-sm text-muted-foreground space-y-1\">\n              <div>📞 {t(\"phone\")}: +93 xxx xxx xxx</div>\n              <div>📧 {t(\"email\")}: info@afghan-bazaar.com</div>\n              <div>📍 {t(\"address\")}: {t(\"addressText\")}</div>\n            </div>\n          </div>\n          \n          <div>\n            <h3 className=\"text-lg font-bold text-foreground mb-4\">{t(\"socialMedia\")}</h3>\n            <div className=\"flex gap-4\">\n              <a href=\"#\" className=\"w-10 h-10 bg-muted rounded-full flex items-center justify-center hover:bg-primary hover:text-primary-foreground transition-colors\">\n                <i className=\"fab fa-facebook\"></i>\n              </a>\n              <a href=\"#\" className=\"w-10 h-10 bg-muted rounded-full flex items-center justify-center hover:bg-primary hover:text-primary-foreground transition-colors\">\n                <i className=\"fab fa-instagram\"></i>\n              </a>\n              <a href=\"#\" className=\"w-10 h-10 bg-muted rounded-full flex items-center justify-center hover:bg-primary hover:text-primary-foreground transition-colors\">\n                <i className=\"fab fa-twitter\"></i>\n              </a>\n              <a href=\"#\" className=\"w-10 h-10 bg-muted rounded-full flex items-center justify-center hover:bg-primary hover:text-primary-foreground transition-colors\">\n                <i className=\"fab fa-telegram\"></i>\n              </a>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"border-t border-border pt-4 text-center\">\n          <p className=\"text-sm text-muted-foreground\">\n            © 2024 {t(\"siteName\")}. {t(\"allRightsReserved\")}\n          </p>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":5769},"client/src/pages/PostAd.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLanguage } from \"@/hooks/useLanguage\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { categories, provinces } from \"@/lib/sampleData\";\nimport type { InsertProduct } from \"@shared/schema\";\n\nexport default function PostAd() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const { t } = useLanguage();\n  const queryClient = useQueryClient();\n  \n  const [formData, setFormData] = useState<InsertProduct>({\n    title: \"\",\n    description: \"\",\n    price: \"\",\n    category: \"\",\n    location: \"\",\n    images: [],\n    isActive: true,\n  });\n\n  const createProductMutation = useMutation({\n    mutationFn: async (data: InsertProduct) => {\n      const response = await apiRequest(\"POST\", \"/api/products\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: t(\"success\"),\n        description: t(\"adPostedSuccessfully\"),\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      setLocation(\"/\");\n    },\n    onError: () => {\n      toast({\n        title: t(\"error\"),\n        description: t(\"failedToPostAd\"),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.title || !formData.description || !formData.price || !formData.category || !formData.location) {\n      toast({\n        title: t(\"error\"),\n        description: t(\"fillAllRequiredFields\"),\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createProductMutation.mutate(formData);\n  };\n\n  const updateField = (field: keyof InsertProduct, value: string | string[] | boolean) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <div className=\"max-w-2xl mx-auto\">\n      <div className=\"bg-card rounded-xl p-6 shadow-md border border-border\">\n        <h1 className=\"text-3xl font-bold text-center text-foreground mb-6\">\n          📝 {t(\"postNewAd\")}\n        </h1>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-foreground text-sm font-bold mb-2\">\n                {t(\"adTitle\")} *\n              </label>\n              <Input\n                type=\"text\"\n                placeholder={t(\"adTitle\")}\n                value={formData.title}\n                onChange={(e) => updateField(\"title\", e.target.value)}\n                required\n                data-testid=\"input-title\"\n              />\n            </div>\n            \n            <div>\n              <label className=\"block text-foreground text-sm font-bold mb-2\">\n                {t(\"category\")} *\n              </label>\n              <Select value={formData.category} onValueChange={(value) => updateField(\"category\", value)}>\n                <SelectTrigger data-testid=\"select-category\">\n                  <SelectValue placeholder={t(\"selectCategory\")} />\n                </SelectTrigger>\n                <SelectContent>\n                  {categories.map((category) => (\n                    <SelectItem key={category.id} value={category.name}>\n                      {category.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-foreground text-sm font-bold mb-2\">\n                {t(\"price\")} *\n              </label>\n              <Input\n                type=\"text\"\n                placeholder={t(\"priceInAFN\")}\n                value={formData.price}\n                onChange={(e) => updateField(\"price\", e.target.value)}\n                required\n                data-testid=\"input-price\"\n              />\n            </div>\n            \n            <div>\n              <label className=\"block text-foreground text-sm font-bold mb-2\">\n                {t(\"location\")} *\n              </label>\n              <Select value={formData.location} onValueChange={(value) => updateField(\"location\", value)}>\n                <SelectTrigger data-testid=\"select-location\">\n                  <SelectValue placeholder={t(\"selectLocation\")} />\n                </SelectTrigger>\n                <SelectContent>\n                  {provinces.map((province) => (\n                    <SelectItem key={province.id} value={province.name}>\n                      {province.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          \n          <div>\n            <label className=\"block text-foreground text-sm font-bold mb-2\">\n              {t(\"description\")} *\n            </label>\n            <Textarea\n              placeholder={t(\"adDescription\")}\n              rows={4}\n              value={formData.description}\n              onChange={(e) => updateField(\"description\", e.target.value)}\n              className=\"resize-none\"\n              required\n              data-testid=\"textarea-description\"\n            />\n          </div>\n          \n          <div className=\"flex gap-4 justify-center\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => setLocation(\"/\")}\n              data-testid=\"button-cancel\"\n            >\n              {t(\"cancel\")}\n            </Button>\n            \n            <Button\n              type=\"submit\"\n              disabled={createProductMutation.isPending}\n              className=\"px-8\"\n              data-testid=\"button-submit\"\n            >\n              {createProductMutation.isPending ? (\n                <div className=\"loading-spinner mr-2\"></div>\n              ) : (\n                <i className=\"fas fa-upload mr-2\"></i>\n              )}\n              {createProductMutation.isPending ? t(\"posting\") : t(\"postAd\")}\n            </Button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6483},"client/src/pages/Products.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport ProductGrid from \"@/components/ProductGrid\";\nimport { useLanguage } from \"@/hooks/useLanguage\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Category, Province } from \"@shared/schema\";\n\nexport default function Products() {\n  const [location] = useLocation();\n  const { t } = useLanguage();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [category, setCategory] = useState(\"\");\n  const [locationFilter, setLocationFilter] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const [selectedLocation, setSelectedLocation] = useState(\"all\");\n  const [priceMin, setPriceMin] = useState(\"\");\n  const [priceMax, setPriceMax] = useState(\"\");\n  const [sortBy, setSortBy] = useState(\"newest\");\n  const [, setCurrentLocation] = useLocation();\n\n  // Fetch categories and provinces from API\n  const { data: categories = [], isLoading: categoriesLoading } = useQuery<Category[]>({\n    queryKey: ['/api/categories'],\n  });\n\n  const { data: provinces = [], isLoading: provincesLoading } = useQuery<Province[]>({\n    queryKey: ['/api/provinces'],\n  });\n\n  useEffect(() => {\n    const url = new URL(window.location.href);\n    const params = url.searchParams;\n    \n    setSearchQuery(params.get('search') || '');\n    setCategory(params.get('category') || '');\n    setLocationFilter(params.get('location') || '');\n    setSelectedCategory(params.get('category') || 'all');\n    setSelectedLocation(params.get('location') || 'all');\n  }, [location]);\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const params = new URLSearchParams();\n    if (searchQuery) params.set('search', searchQuery);\n    if (selectedCategory && selectedCategory !== 'all') params.set('category', selectedCategory);\n    if (selectedLocation && selectedLocation !== 'all') params.set('location', selectedLocation);\n    \n    setCurrentLocation(`/products?${params.toString()}`);\n  };\n\n  const handleApplyFilters = () => {\n    // Apply additional filters like price range and sorting\n    handleSearch(new Event('submit') as any);\n  };\n\n  let title = t(\"allProducts\");\n  if (category && locationFilter) {\n    title = `${category} ${t(\"in\")} ${locationFilter}`;\n  } else if (category) {\n    title = `${t(\"category\")}: ${category}`;\n  } else if (locationFilter) {\n    title = `${t(\"productsIn\")} ${locationFilter}`;\n  } else if (searchQuery) {\n    title = `${t(\"searchResults\")}: ${searchQuery}`;\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Search Section */}\n      <div className=\"bg-card rounded-xl p-6 shadow-md border border-border\">\n        <h2 className=\"text-xl font-bold text-foreground mb-4 border-b border-border pb-2\">\n          {t(\"search\")}\n        </h2>\n        \n        <form onSubmit={handleSearch} className=\"space-y-4\">\n          <div className=\"flex flex-wrap gap-4\">\n            <Input\n              type=\"text\"\n              placeholder={t(\"searchProducts\")}\n              className=\"flex-1 min-w-64\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              data-testid=\"input-search\"\n            />\n            \n            <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n              <SelectTrigger className=\"min-w-40\" data-testid=\"select-category\">\n                <SelectValue placeholder={t(\"allCategories\")} />\n              </SelectTrigger>\n              <SelectContent className=\"max-h-60 overflow-y-auto\">\n                <SelectItem value=\"all\">{t(\"allCategories\")}</SelectItem>\n                {categories.map((cat) => (\n                  <SelectItem key={cat.id} value={cat.name}>{cat.name}</SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            \n            <Select value={selectedLocation} onValueChange={setSelectedLocation}>\n              <SelectTrigger className=\"min-w-32\" data-testid=\"select-location\">\n                <SelectValue placeholder={t(\"allProvinces\")} />\n              </SelectTrigger>\n              <SelectContent className=\"max-h-60 overflow-y-auto\">\n                <SelectItem value=\"all\">{t(\"allProvinces\")}</SelectItem>\n                {provinces.map((province) => (\n                  <SelectItem key={province.id} value={province.name}>{province.name}</SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            \n            <Button type=\"submit\" data-testid=\"button-search\">\n              <i className=\"fas fa-search mr-2\"></i>\n              {t(\"search\")}\n            </Button>\n          </div>\n        </form>\n      </div>\n\n      <div className=\"flex flex-col lg:flex-row gap-8\">\n        {/* Filters Sidebar */}\n        <div className=\"lg:w-1/4\">\n          <div className=\"bg-card rounded-lg p-6 border border-border space-y-6\">\n            <h3 className=\"text-lg font-semibold text-foreground\">{t(\"filters\")}</h3>\n            \n            {/* Price Range */}\n            <div>\n              <h4 className=\"font-medium mb-2 text-foreground\">{t(\"priceRange\")}</h4>\n              <div className=\"flex space-x-2\">\n                <Input\n                  type=\"number\"\n                  placeholder={t(\"min\")}\n                  value={priceMin}\n                  onChange={(e) => setPriceMin(e.target.value)}\n                  data-testid=\"input-price-min\"\n                />\n                <Input\n                  type=\"number\"\n                  placeholder={t(\"max\")}\n                  value={priceMax}\n                  onChange={(e) => setPriceMax(e.target.value)}\n                  data-testid=\"input-price-max\"\n                />\n              </div>\n            </div>\n\n            {/* Sort By */}\n            <div>\n              <h4 className=\"font-medium mb-2 text-foreground\">{t(\"sortBy\")}</h4>\n              <Select value={sortBy} onValueChange={setSortBy}>\n                <SelectTrigger data-testid=\"select-sort\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"newest\">{t(\"newestFirst\")}</SelectItem>\n                  <SelectItem value=\"price-low\">{t(\"priceLowToHigh\")}</SelectItem>\n                  <SelectItem value=\"price-high\">{t(\"priceHighToLow\")}</SelectItem>\n                  <SelectItem value=\"popular\">{t(\"mostPopular\")}</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <Button onClick={handleApplyFilters} className=\"w-full\" data-testid=\"button-apply-filters\">\n              {t(\"applyFilters\")}\n            </Button>\n          </div>\n        </div>\n\n        {/* Products Grid */}\n        <div className=\"lg:w-3/4\">\n          <ProductGrid \n            searchQuery={searchQuery}\n            category={category}\n            location={locationFilter}\n            title={title}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7171},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/BackButton.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { useLanguage } from \"@/hooks/useLanguage\";\n\nexport default function BackButton() {\n  const [location, setLocation] = useLocation();\n  const { t } = useLanguage();\n\n  // Hide back button on home page\n  if (location === \"/\") {\n    return null;\n  }\n\n  const handleBack = () => {\n    if (window.history.length > 1) {\n      window.history.back();\n    } else {\n      setLocation(\"/\");\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-3\">\n      <Button \n        variant=\"ghost\" \n        onClick={handleBack}\n        className=\"flex items-center space-x-2 text-muted-foreground hover:text-primary transition-colors\"\n        data-testid=\"button-back\"\n      >\n        <i className=\"fas fa-arrow-left\"></i>\n        <span>{t(\"back\")}</span>\n      </Button>\n    </div>\n  );\n}\n","size_bytes":878},"client/src/components/Header.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLanguage } from \"@/hooks/useLanguage\";\nimport LanguageSwitcher from \"./LanguageSwitcher\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { User } from \"@shared/schema\";\n\nexport default function Header() {\n  const [location] = useLocation();\n  const { t } = useLanguage();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [showAuthModal, setShowAuthModal] = useState<\"login\" | \"register\" | null>(null);\n\n  const { data: user, isLoading } = useQuery<User | null>({\n    queryKey: [\"/api/user\"],\n    retry: false,\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: () => apiRequest(\"POST\", \"/api/logout\"),\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/user\"], null);\n      toast({\n        title: t(\"success\"),\n        description: t(\"loggedOut\"),\n      });\n    },\n  });\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  return (\n    <header className=\"bg-card border-b border-border sticky top-0 z-50 shadow-sm\">\n      <div className=\"container mx-auto px-4 py-3\">\n        <div className=\"flex items-center justify-between\">\n          {/* Logo & Brand */}\n          <Link href=\"/\" className=\"flex items-center space-x-3 no-underline\" data-testid=\"link-home\">\n            <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n              <i className=\"fas fa-mountain text-primary-foreground text-lg\"></i>\n            </div>\n            <div>\n              <h1 className=\"text-xl font-bold text-foreground\">{t(\"siteName\")}</h1>\n              <p className=\"text-xs text-muted-foreground\">{t(\"siteTagline\")}</p>\n            </div>\n          </Link>\n\n          {/* Main Navigation (Desktop) */}\n          <nav className=\"hidden md:flex items-center space-x-8\">\n            <Link \n              href=\"/\" \n              className={`nav-link text-foreground hover:text-primary font-medium transition-colors flex items-center space-x-2 no-underline ${location === '/' ? 'text-primary' : ''}`}\n              data-testid=\"nav-home\"\n            >\n              <i className=\"fas fa-home\"></i>\n              <span>{t(\"home\")}</span>\n            </Link>\n            <Link \n              href=\"/products\" \n              className={`nav-link text-foreground hover:text-primary font-medium transition-colors flex items-center space-x-2 no-underline ${location === '/products' ? 'text-primary' : ''}`}\n              data-testid=\"nav-products\"\n            >\n              <i className=\"fas fa-shopping-bag\"></i>\n              <span>{t(\"products\")}</span>\n            </Link>\n            {user && (\n              <Link \n                href=\"/post-ad\" \n                className={`nav-link text-foreground hover:text-primary font-medium transition-colors flex items-center space-x-2 no-underline ${location === '/post-ad' ? 'text-primary' : ''}`}\n                data-testid=\"nav-post-ad\"\n              >\n                <i className=\"fas fa-plus-circle\"></i>\n                <span>{t(\"postAd\")}</span>\n              </Link>\n            )}\n          </nav>\n\n          {/* Right Side Controls */}\n          <div className=\"flex items-center space-x-4\">\n            <LanguageSwitcher />\n\n            {/* User Actions */}\n            <div className=\"flex items-center space-x-2\">\n              {user && (\n                <Link href=\"/dashboard\" className=\"relative p-2 text-muted-foreground hover:text-primary transition-colors no-underline\" data-testid=\"button-messages\">\n                  <i className=\"fas fa-envelope text-lg\"></i>\n                  <span className=\"absolute -top-1 -right-1 w-4 h-4 bg-destructive text-destructive-foreground text-xs rounded-full flex items-center justify-center\">3</span>\n                </Link>\n              )}\n              \n              <div className=\"hidden md:flex items-center space-x-2\">\n                {isLoading ? (\n                  <div className=\"loading-spinner\"></div>\n                ) : user ? (\n                  <>\n                    <Link href=\"/dashboard\" className=\"px-4 py-2 text-primary border border-primary rounded-md hover:bg-primary hover:text-primary-foreground transition-colors no-underline\" data-testid=\"button-dashboard\">\n                      {t(\"dashboard\")}\n                    </Link>\n                    <Button \n                      onClick={handleLogout}\n                      variant=\"outline\"\n                      className=\"px-4 py-2\"\n                      data-testid=\"button-logout\"\n                    >\n                      {t(\"logout\")}\n                    </Button>\n                  </>\n                ) : (\n                  <>\n                    <Button \n                      variant=\"outline\"\n                      onClick={() => setShowAuthModal(\"login\")}\n                      data-testid=\"button-sign-in\"\n                    >\n                      {t(\"signIn\")}\n                    </Button>\n                    <Button \n                      onClick={() => setShowAuthModal(\"register\")}\n                      data-testid=\"button-join-now\"\n                    >\n                      {t(\"joinNow\")}\n                    </Button>\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":5539},"client/src/components/LanguageSwitcher.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useLanguage } from \"@/hooks/useLanguage\";\n\nexport default function LanguageSwitcher() {\n  const [isOpen, setIsOpen] = useState(false);\n  const { language, setLanguage, languages } = useLanguage();\n\n  const currentLang = languages.find(lang => lang.code === language);\n\n  const handleLanguageChange = (langCode: string) => {\n    setLanguage(langCode);\n    setIsOpen(false);\n  };\n\n  return (\n    <div className=\"relative\">\n      <Button\n        variant=\"outline\"\n        onClick={() => setIsOpen(!isOpen)}\n        className=\"flex items-center space-x-2 px-3 py-2\"\n        data-testid=\"button-language-toggle\"\n      >\n        <span className=\"text-lg\">{currentLang?.flag}</span>\n        <span className=\"text-sm font-medium\">{currentLang?.code.toUpperCase()}</span>\n        <i className=\"fas fa-chevron-down text-xs\"></i>\n      </Button>\n\n      {isOpen && (\n        <div className=\"absolute right-0 mt-2 w-40 bg-card border border-border rounded-md shadow-lg z-10\">\n          {languages.map((lang) => (\n            <button\n              key={lang.code}\n              onClick={() => handleLanguageChange(lang.code)}\n              className=\"flex items-center w-full px-4 py-2 hover:bg-muted transition-colors text-left\"\n              data-testid={`language-option-${lang.code}`}\n            >\n              <span className=\"text-lg mr-3\">{lang.flag}</span>\n              <span className=\"text-sm\">{lang.name}</span>\n            </button>\n          ))}\n        </div>\n      )}\n\n      {/* Overlay to close dropdown */}\n      {isOpen && (\n        <div \n          className=\"fixed inset-0 z-0\" \n          onClick={() => setIsOpen(false)}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":1760},"client/src/components/MessagesSection.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useWebSocket } from \"@/hooks/useWebSocket\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLanguage } from \"@/hooks/useLanguage\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Conversation, Message } from \"@shared/schema\";\n\nexport default function MessagesSection() {\n  const [selectedConversation, setSelectedConversation] = useState<string | null>(null);\n  const [messageInput, setMessageInput] = useState(\"\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const { t } = useLanguage();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: conversations = [] } = useQuery<Conversation[]>({\n    queryKey: [\"/api/conversations\"],\n  });\n\n  const { data: messages = [] } = useQuery<Message[]>({\n    queryKey: [\"/api/conversations\", selectedConversation, \"messages\"],\n    enabled: !!selectedConversation,\n  });\n\n  const sendMessageMutation = useMutation({\n    mutationFn: async (content: string) => {\n      if (!selectedConversation) throw new Error(\"No conversation selected\");\n      const response = await apiRequest(\"POST\", `/api/conversations/${selectedConversation}/messages`, {\n        content,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      setMessageInput(\"\");\n      queryClient.invalidateQueries({ queryKey: [\"/api/conversations\", selectedConversation, \"messages\"] });\n    },\n    onError: () => {\n      toast({\n        title: t(\"error\"),\n        description: t(\"failedToSendMessage\"),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // WebSocket for real-time messaging\n  const { lastMessage } = useWebSocket(\"/ws\");\n\n  useEffect(() => {\n    if (lastMessage?.type === \"new_message\") {\n      queryClient.invalidateQueries({ queryKey: [\"/api/conversations\"] });\n      if (selectedConversation === lastMessage.message.conversationId) {\n        queryClient.invalidateQueries({ \n          queryKey: [\"/api/conversations\", selectedConversation, \"messages\"] \n        });\n      }\n    }\n  }, [lastMessage, selectedConversation, queryClient]);\n\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  const handleSendMessage = () => {\n    if (messageInput.trim() && selectedConversation) {\n      sendMessageMutation.mutate(messageInput.trim());\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const filteredConversations = conversations.filter(conv =>\n    searchQuery === \"\" || \n    conv.id.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  return (\n    <div className=\"bg-card rounded-lg border border-border overflow-hidden\">\n      <div className=\"p-6 border-b border-border\">\n        <h2 className=\"text-xl font-semibold\">{t(\"messages\")}</h2>\n      </div>\n      \n      <div className=\"flex h-96\">\n        {/* Conversations List */}\n        <div className=\"w-1/3 border-r border-border\">\n          <div className=\"p-4\">\n            <div className=\"relative\">\n              <i className=\"fas fa-search absolute left-3 top-3 text-muted-foreground\"></i>\n              <Input\n                type=\"text\"\n                placeholder={t(\"searchConversations\")}\n                className=\"pl-10\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                data-testid=\"input-search-conversations\"\n              />\n            </div>\n          </div>\n          \n          <div className=\"space-y-1\">\n            {filteredConversations.length === 0 ? (\n              <div className=\"p-4 text-center text-muted-foreground\">\n                <i className=\"fas fa-envelope text-2xl mb-2\"></i>\n                <p className=\"text-sm\">{t(\"noConversations\")}</p>\n              </div>\n            ) : (\n              filteredConversations.map((conversation) => (\n                <div\n                  key={conversation.id}\n                  className={`conversation-item p-4 hover:bg-muted cursor-pointer transition-colors ${\n                    selectedConversation === conversation.id\n                      ? \"border-l-4 border-primary bg-primary/5\"\n                      : \"border-l-4 border-transparent\"\n                  }`}\n                  onClick={() => setSelectedConversation(conversation.id)}\n                  data-testid={`conversation-${conversation.id}`}\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-10 h-10 bg-secondary rounded-full flex items-center justify-center\">\n                      <span className=\"text-white font-semibold text-sm\">\n                        {conversation.buyerId.substring(0, 2).toUpperCase()}\n                      </span>\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <h4 className=\"font-medium text-sm truncate\">\n                        {t(\"conversation\")} #{conversation.id.substring(0, 8)}\n                      </h4>\n                      <p className=\"text-xs text-muted-foreground truncate\">\n                        {conversation.productId ? t(\"aboutProduct\") : t(\"generalChat\")}\n                      </p>\n                    </div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      {new Date(conversation.createdAt!).toLocaleDateString()}\n                    </div>\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n\n        {/* Chat Interface */}\n        <div className=\"flex-1 flex flex-col\">\n          {selectedConversation ? (\n            <>\n              {/* Chat Header */}\n              <div className=\"p-4 border-b border-border\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-10 h-10 bg-secondary rounded-full flex items-center justify-center\">\n                    <span className=\"text-white font-semibold\">\n                      {selectedConversation.substring(0, 2).toUpperCase()}\n                    </span>\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium\">{t(\"conversation\")} #{selectedConversation.substring(0, 8)}</h4>\n                    <p className=\"text-xs text-muted-foreground\">{t(\"online\")}</p>\n                  </div>\n                </div>\n              </div>\n\n              {/* Messages */}\n              <div className=\"flex-1 p-4 space-y-4 overflow-y-auto\">\n                {messages.length === 0 ? (\n                  <div className=\"text-center text-muted-foreground py-8\">\n                    <i className=\"fas fa-comments text-4xl mb-4\"></i>\n                    <p>{t(\"noMessages\")}</p>\n                  </div>\n                ) : (\n                  messages.map((message) => (\n                    <div\n                      key={message.id}\n                      className={`flex ${message.senderId === \"current-user\" ? \"justify-end\" : \"justify-start\"}`}\n                    >\n                      <div\n                        className={`text-sm p-3 rounded-lg max-w-xs ${\n                          message.senderId === \"current-user\"\n                            ? \"message-bubble-sent text-white\"\n                            : \"message-bubble-received\"\n                        }`}\n                        data-testid={`message-${message.id}`}\n                      >\n                        <p>{message.content}</p>\n                        <span\n                          className={`text-xs mt-1 block ${\n                            message.senderId === \"current-user\"\n                              ? \"text-primary-foreground/70\"\n                              : \"text-muted-foreground\"\n                          }`}\n                        >\n                          {new Date(message.createdAt!).toLocaleTimeString()}\n                        </span>\n                      </div>\n                    </div>\n                  ))\n                )}\n                <div ref={messagesEndRef} />\n              </div>\n\n              {/* Message Input */}\n              <div className=\"p-4 border-t border-border\">\n                <div className=\"flex space-x-2\">\n                  <Input\n                    type=\"text\"\n                    placeholder={t(\"typeMessage\")}\n                    value={messageInput}\n                    onChange={(e) => setMessageInput(e.target.value)}\n                    onKeyPress={handleKeyPress}\n                    className=\"flex-1\"\n                    data-testid=\"input-message\"\n                  />\n                  <Button\n                    onClick={handleSendMessage}\n                    disabled={!messageInput.trim() || sendMessageMutation.isPending}\n                    data-testid=\"button-send-message\"\n                  >\n                    {sendMessageMutation.isPending ? (\n                      <div className=\"loading-spinner\"></div>\n                    ) : (\n                      <i className=\"fas fa-paper-plane\"></i>\n                    )}\n                  </Button>\n                </div>\n              </div>\n            </>\n          ) : (\n            <div className=\"flex-1 flex items-center justify-center\">\n              <div className=\"text-center text-muted-foreground\">\n                <i className=\"fas fa-comments text-6xl mb-4\"></i>\n                <p className=\"text-lg font-medium\">{t(\"selectConversation\")}</p>\n                <p className=\"text-sm\">{t(\"selectConversationDesc\")}</p>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9911},"client/src/components/ProductCard.tsx":{"content":"import type { Product } from \"@shared/schema\";\nimport { useLanguage } from \"@/hooks/useLanguage\";\n\ninterface ProductCardProps {\n  product: Product;\n  onClick?: () => void;\n}\n\nexport default function ProductCard({ product, onClick }: ProductCardProps) {\n  const { t } = useLanguage();\n\n  return (\n    <div \n      className=\"product-card bg-card rounded-lg shadow-md overflow-hidden border border-border transition-all duration-300 cursor-pointer\"\n      onClick={onClick}\n      data-testid={`product-card-${product.id}`}\n    >\n      {product.images && product.images.length > 0 ? (\n        <img \n          src={product.images[0]} \n          alt={product.title}\n          className=\"w-full h-48 object-cover\"\n          data-testid={`product-image-${product.id}`}\n        />\n      ) : (\n        <div className=\"w-full h-48 bg-muted flex items-center justify-center\">\n          <i className=\"fas fa-image text-4xl text-muted-foreground\"></i>\n        </div>\n      )}\n      \n      <div className=\"p-4\">\n        <h3 className=\"font-semibold text-foreground mb-2\" data-testid={`product-title-${product.id}`}>\n          {product.title}\n        </h3>\n        <p className=\"text-sm text-muted-foreground mb-2\" data-testid={`product-location-${product.id}`}>\n          📍 {product.location}\n        </p>\n        <p className=\"text-lg font-bold text-primary\" data-testid={`product-price-${product.id}`}>\n          {product.price}\n        </p>\n        <p className=\"text-sm text-muted-foreground mt-2 line-clamp-2\" data-testid={`product-description-${product.id}`}>\n          {product.description}\n        </p>\n        <div className=\"flex items-center justify-between mt-3\">\n          <span className=\"text-xs bg-accent text-accent-foreground px-2 py-1 rounded\" data-testid={`product-category-${product.id}`}>\n            {product.category}\n          </span>\n          <span className=\"text-xs text-muted-foreground\">\n            {new Date(product.createdAt!).toLocaleDateString()}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2034},"client/src/hooks/useLanguage.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from \"react\";\nimport { translations } from \"@/lib/i18n\";\n\ninterface Language {\n  code: string;\n  name: string;\n  flag: string;\n  dir: \"ltr\" | \"rtl\";\n}\n\ninterface LanguageContextType {\n  language: string;\n  setLanguage: (lang: string) => void;\n  t: (key: string) => string;\n  languages: Language[];\n  currentLanguage: Language;\n}\n\nconst languages: Language[] = [\n  { code: \"en\", name: \"English\", flag: \"🇺🇸\", dir: \"ltr\" },\n  { code: \"fa\", name: \"دری\", flag: \"🇦🇫\", dir: \"rtl\" },\n  { code: \"ps\", name: \"پښتو\", flag: \"🇦🇫\", dir: \"rtl\" },\n];\n\nconst LanguageContext = createContext<LanguageContextType | undefined>(undefined);\n\nexport function LanguageProvider({ children }: { children: ReactNode }) {\n  const [language, setLanguageState] = useState(\"en\");\n\n  const setLanguage = (lang: string) => {\n    setLanguageState(lang);\n    localStorage.setItem(\"language\", lang);\n    \n    const selectedLang = languages.find(l => l.code === lang) || languages[0];\n    \n    // Update document attributes\n    document.documentElement.setAttribute(\"dir\", selectedLang.dir);\n    document.documentElement.setAttribute(\"lang\", lang);\n    \n    // Apply Arabic font for Dari and Pashto\n    if (lang === \"fa\" || lang === \"ps\") {\n      document.body.classList.add(\"arabic-font\");\n    } else {\n      document.body.classList.remove(\"arabic-font\");\n    }\n  };\n\n  const t = (key: string): string => {\n    return (translations as any)[language]?.[key] || (translations as any).en[key] || key;\n  };\n\n  const currentLanguage = languages.find(l => l.code === language) || languages[0];\n\n  useEffect(() => {\n    const savedLanguage = localStorage.getItem(\"language\");\n    if (savedLanguage && languages.some(l => l.code === savedLanguage)) {\n      setLanguage(savedLanguage);\n    }\n  }, []);\n\n  return (\n    <LanguageContext.Provider value={{\n      language,\n      setLanguage,\n      t,\n      languages,\n      currentLanguage,\n    }}>\n      {children}\n    </LanguageContext.Provider>\n  );\n}\n\nexport function useLanguage() {\n  const context = useContext(LanguageContext);\n  if (context === undefined) {\n    throw new Error(\"useLanguage must be used within a LanguageProvider\");\n  }\n  return context;\n}","size_bytes":2259},"client/src/hooks/useWebSocket.ts":{"content":"import { useState, useEffect, useRef } from \"react\";\n\ninterface WebSocketMessage {\n  type: string;\n  [key: string]: any;\n}\n\nexport function useWebSocket(url: string) {\n  const [lastMessage, setLastMessage] = useState<WebSocketMessage | null>(null);\n  const [connectionStatus, setConnectionStatus] = useState<'Connecting' | 'Open' | 'Closing' | 'Closed'>('Connecting');\n  const ws = useRef<WebSocket | null>(null);\n\n  useEffect(() => {\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = `${protocol}//${window.location.host}${url}`;\n    \n    ws.current = new WebSocket(wsUrl);\n\n    ws.current.onopen = () => {\n      setConnectionStatus('Open');\n    };\n\n    ws.current.onmessage = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        setLastMessage(data);\n      } catch (error) {\n        console.error('Failed to parse WebSocket message:', error);\n      }\n    };\n\n    ws.current.onclose = () => {\n      setConnectionStatus('Closed');\n    };\n\n    ws.current.onerror = (error) => {\n      console.error('WebSocket error:', error);\n      setConnectionStatus('Closed');\n    };\n\n    return () => {\n      if (ws.current?.readyState === WebSocket.OPEN) {\n        ws.current.close();\n      }\n    };\n  }, [url]);\n\n  const sendMessage = (message: WebSocketMessage) => {\n    if (ws.current?.readyState === WebSocket.OPEN) {\n      ws.current.send(JSON.stringify(message));\n    }\n  };\n\n  return {\n    lastMessage,\n    connectionStatus,\n    sendMessage,\n  };\n}\n","size_bytes":1513},"client/src/lib/i18n.ts":{"content":"export const translations = {\n  en: {\n    // Site branding\n    siteName: \"Afghan Bazaar\",\n    siteTagline: \"Local Marketplace\",\n    \n    // Navigation\n    home: \"Home\",\n    products: \"Products\",\n    categories: \"Categories\",\n    dashboard: \"Dashboard\",\n    postAdNav: \"Post Ad\",\n    back: \"Back\",\n    \n    // Authentication\n    signIn: \"Sign In\",\n    joinNow: \"Join Now\",\n    logout: \"Logout\",\n    authRequired: \"Authentication Required\",\n    pleaseSignIn: \"Please sign in to access your dashboard\",\n    goHome: \"Go Home\",\n    \n    // Hero section\n    heroTitle1: \"Discover Afghanistan's\",\n    heroTitle2: \"Local Treasures\",\n    heroDescription: \"Connect with local artisans, farmers, and merchants across all 34 provinces. Buy authentic Afghan products directly from makers.\",\n    exploreProducts: \"Explore Products\",\n    startSelling: \"Start Selling\",\n    \n    // Categories\n    shopByCategory: \"Shop by Category\",\n    exploreByProvince: \"Explore by Province\",\n    \n    // Products\n    featuredProducts: \"Featured Products\",\n    allProducts: \"All Products\",\n    noProductsFound: \"No products found\",\n    tryDifferentSearch: \"Try adjusting your search criteria\",\n    productsFound: \"products found\",\n    productsIn: \"Products in\",\n    searchResults: \"Search results\",\n    \n    // Search and filters\n    search: \"Search\",\n    searchProducts: \"Search products...\",\n    allCategories: \"All Categories\",\n    allProvinces: \"All Provinces\",\n    category: \"Category\",\n    location: \"Location\",\n    priceRange: \"Price Range\",\n    min: \"Min\",\n    max: \"Max\",\n    sortBy: \"Sort By\",\n    newestFirst: \"Newest First\",\n    priceLowToHigh: \"Price: Low to High\",\n    priceHighToLow: \"Price: High to Low\",\n    mostPopular: \"Most Popular\",\n    applyFilters: \"Apply Filters\",\n    filters: \"Filters\",\n    in: \"in\",\n    \n    // Post Ad\n    postNewAd: \"Post New Ad\",\n    adTitle: \"Ad Title\",\n    selectCategory: \"Select Category\",\n    price: \"Price\",\n    priceInAFN: \"Price (AFN/USD)\",\n    selectLocation: \"Select Location\",\n    description: \"Description\",\n    adDescription: \"Ad description...\",\n    cancel: \"Cancel\",\n    postAd: \"Post Ad\",\n    posting: \"Posting...\",\n    fillAllRequiredFields: \"Please fill all required fields\",\n    adPostedSuccessfully: \"Ad posted successfully!\",\n    failedToPostAd: \"Failed to post ad. Please try again.\",\n    \n    // Messages\n    messages: \"Messages\",\n    searchConversations: \"Search conversations...\",\n    noConversations: \"No conversations yet\",\n    conversation: \"Conversation\",\n    aboutProduct: \"About product\",\n    generalChat: \"General chat\",\n    online: \"Online\",\n    noMessages: \"No messages yet\",\n    selectConversation: \"Select a conversation\",\n    selectConversationDesc: \"Choose a conversation from the list to start messaging\",\n    typeMessage: \"Type your message...\",\n    failedToSendMessage: \"Failed to send message\",\n    \n    // Dashboard\n    myOrders: \"My Orders\",\n    myProducts: \"My Products\", \n    favorites: \"Favorites\",\n    settings: \"Settings\",\n    noOrders: \"No orders yet\",\n    noOrdersDesc: \"Your orders will appear here once you start buying\",\n    addProduct: \"Add Product\",\n    noProducts: \"No products yet\",\n    noProductsDesc: \"Start selling by posting your first product\",\n    noFavorites: \"No favorites yet\",\n    noFavoritesDesc: \"Products you like will appear here\",\n    accountSettings: \"Account Settings\",\n    username: \"Username\",\n    phoneNumber: \"Phone Number\",\n    notSet: \"Not set\",\n    noPhoneNumber: \"No phone number\",\n    preferences: \"Preferences\",\n    settingsComingSoon: \"More settings coming soon\",\n    \n    // About\n    aboutTitle: \"Welcome to Afghan Bazaar\",\n    aboutDescription1: \"Afghanistan's largest online marketplace where you can find anything you need. From real estate and vehicles to home appliances, electronics, and job opportunities.\",\n    aboutDescription2: \"Using our advanced search system and comprehensive categories, easily find what you're looking for.\",\n    aboutUs: \"About Us\",\n    contactUs: \"Contact Us\",\n    phone: \"Phone\",\n    email: \"Email\",\n    address: \"Address\",\n    addressText: \"Kabul, Afghanistan\",\n    socialMedia: \"Social Media\",\n    allRightsReserved: \"All rights reserved\",\n    footerDescription: \"Afghan Bazaar is the country's largest online buying and selling platform that provides diverse services in e-commerce.\",\n    \n    // Latest ad\n    latestAd: \"Latest Ad\",\n    \n    // General\n    success: \"Success\",\n    error: \"Error\",\n    loading: \"Loading...\",\n    failedToLoadProducts: \"Failed to load products\",\n    loggedOut: \"Successfully logged out\",\n    productsText: \"products\",\n  },\n  \n  fa: {\n    // Site branding\n    siteName: \"بازار افغانستان\",\n    siteTagline: \"بازار محلی\",\n    \n    // Navigation\n    home: \"خانه\",\n    products: \"محصولات\",\n    categories: \"دسته‌بندی‌ها\",\n    dashboard: \"داشبورد\",\n    postAdNav: \"ثبت آگهی\",\n    back: \"بازگشت\",\n    \n    // Authentication\n    signIn: \"ورود\",\n    joinNow: \"عضویت\",\n    logout: \"خروج\",\n    authRequired: \"احراز هویت لازم\",\n    pleaseSignIn: \"لطفاً برای دسترسی به داشبورد وارد شوید\",\n    goHome: \"بازگشت به خانه\",\n    \n    // Hero section\n    heroTitle1: \"کشف گنجینه‌های\",\n    heroTitle2: \"محلی افغانستان\",\n    heroDescription: \"با صنعتگران، کشاورزان و تاجران محلی در تمام ۳۴ ولایت ارتباط برقرار کنید. محصولات اصیل افغانی را مستقیماً از سازندگان خریداری کنید.\",\n    exploreProducts: \"کاوش محصولات\",\n    startSelling: \"شروع فروش\",\n    \n    // Categories\n    shopByCategory: \"خرید بر اساس دسته‌بندی\",\n    exploreByProvince: \"کاوش بر اساس ولایت\",\n    \n    // Products\n    featuredProducts: \"محصولات ویژه\",\n    allProducts: \"همه محصولات\",\n    noProductsFound: \"محصولی یافت نشد\",\n    tryDifferentSearch: \"معیارهای جستجوی خود را تنظیم کنید\",\n    productsFound: \"محصول یافت شد\",\n    productsIn: \"محصولات در\",\n    searchResults: \"نتایج جستجو\",\n    \n    // Search and filters\n    search: \"جستجو\",\n    searchProducts: \"جستجوی محصولات...\",\n    allCategories: \"همه دسته‌ها\",\n    allProvinces: \"همه ولایات\",\n    category: \"دسته‌بندی\",\n    location: \"موقعیت\",\n    priceRange: \"محدوده قیمت\",\n    min: \"کمینه\",\n    max: \"بیشینه\",\n    sortBy: \"مرتب‌سازی بر اساس\",\n    newestFirst: \"جدیدترین ابتدا\",\n    priceLowToHigh: \"قیمت: کم به زیاد\",\n    priceHighToLow: \"قیمت: زیاد به کم\",\n    mostPopular: \"محبوب‌ترین\",\n    applyFilters: \"اعمال فیلترها\",\n    filters: \"فیلترها\",\n    in: \"در\",\n    \n    // Post Ad\n    postNewAd: \"ثبت آگهی جدید\",\n    adTitle: \"عنوان آگهی\",\n    selectCategory: \"انتخاب دسته‌بندی\",\n    price: \"قیمت\",\n    priceInAFN: \"قیمت (افغانی/دلار)\",\n    selectLocation: \"انتخاب موقعیت\",\n    description: \"توضیحات\",\n    adDescription: \"توضیحات آگهی...\",\n    cancel: \"انصراف\",\n    postAd: \"ثبت آگهی\",\n    posting: \"در حال ثبت...\",\n    fillAllRequiredFields: \"لطفاً همه فیلدهای الزامی را پر کنید\",\n    adPostedSuccessfully: \"آگهی با موفقیت ثبت شد!\",\n    failedToPostAd: \"ثبت آگهی ناموفق بود. لطفاً دوباره تلاش کنید.\",\n    \n    // Messages\n    messages: \"پیام‌ها\",\n    searchConversations: \"جستجوی مکالمات...\",\n    noConversations: \"هنوز مکالمه‌ای وجود ندارد\",\n    conversation: \"مکالمه\",\n    aboutProduct: \"درباره محصول\",\n    generalChat: \"گپ عمومی\",\n    online: \"آنلاین\",\n    noMessages: \"هنوز پیامی وجود ندارد\",\n    selectConversation: \"یک مکالمه انتخاب کنید\",\n    selectConversationDesc: \"از فهرست یک مکالمه انتخاب کنید تا پیام‌رسانی را شروع کنید\",\n    typeMessage: \"پیام خود را تایپ کنید...\",\n    failedToSendMessage: \"ارسال پیام ناموفق بود\",\n    \n    // Dashboard\n    myOrders: \"سفارش‌های من\",\n    myProducts: \"محصولات من\",\n    favorites: \"علاقه‌مندی‌ها\",\n    settings: \"تنظیمات\",\n    noOrders: \"هنوز سفارشی وجود ندارد\",\n    noOrdersDesc: \"سفارش‌های شما پس از شروع خرید اینجا نمایش داده می‌شود\",\n    addProduct: \"افزودن محصول\",\n    noProducts: \"هنوز محصولی وجود ندارد\",\n    noProductsDesc: \"با ثبت اولین محصول خود فروش را شروع کنید\",\n    noFavorites: \"هنوز علاقه‌مندی وجود ندارد\",\n    noFavoritesDesc: \"محصولاتی که دوست دارید اینجا نمایش داده می‌شود\",\n    accountSettings: \"تنظیمات حساب\",\n    username: \"نام کاربری\",\n    phoneNumber: \"شماره تلفن\",\n    notSet: \"تنظیم نشده\",\n    noPhoneNumber: \"شماره تلفن وجود ندارد\",\n    preferences: \"ترجیحات\",\n    settingsComingSoon: \"تنظیمات بیشتر به زودی\",\n    \n    // About\n    aboutTitle: \"به بازار افغانستان خوش آمدید\",\n    aboutDescription1: \"بزرگترین بازار آنلاین افغانستان که در آن می‌توانید هر چیزی که نیاز دارید پیدا کنید. از املاک و وسایل نقلیه گرفته تا لوازم خانگی، الکترونیکی و فرصت‌های شغلی.\",\n    aboutDescription2: \"با استفاده از سیستم جستجوی پیشرفته و دسته‌بندی‌های کامل، به راحتی آنچه که می‌خواهید پیدا کنید.\",\n    aboutUs: \"درباره ما\",\n    contactUs: \"تماس با ما\",\n    phone: \"تلفن\",\n    email: \"ایمیل\",\n    address: \"آدرس\",\n    addressText: \"کابل، افغانستان\",\n    socialMedia: \"شبکه‌های اجتماعی\",\n    allRightsReserved: \"تمامی حقوق محفوظ است\",\n    footerDescription: \"بازار افغانستان بزرگترین پلتفرم خرید و فروش آنلاین کشور است که خدمات متنوعی در زمینه تجارت الکترونیک ارائه می‌دهد.\",\n    \n    // Latest ad\n    latestAd: \"آخرین آگهی\",\n    \n    // General\n    success: \"موفقیت\",\n    error: \"خطا\",\n    loading: \"در حال بارگذاری...\",\n    failedToLoadProducts: \"بارگذاری محصولات ناموفق بود\",\n    loggedOut: \"با موفقیت خارج شدید\",\n    productsText: \"محصول\",\n  },\n  \n  ps: {\n    // Site branding\n    siteName: \"د افغانستان بازار\",\n    siteTagline: \"سیمه‌ییز بازار\",\n    \n    // Navigation\n    home: \"کور\",\n    products: \"محصولات\",\n    categories: \"برخې\",\n    dashboard: \"ډشبورډ\",\n    postAdNav: \"اعلان ثبتول\",\n    back: \"بیرته\",\n    \n    // Authentication\n    signIn: \"ننوتل\",\n    joinNow: \"غړیتوب\",\n    logout: \"وتل\",\n    authRequired: \"تصدیق ته اړتیا\",\n    pleaseSignIn: \"لطفاً د ډشبورډ ته د لاسرسي لپاره ننوځئ\",\n    goHome: \"کور ته بیرته\",\n    \n    // Hero section\n    heroTitle1: \"د افغانستان\",\n    heroTitle2: \"سیمه‌ییز خزانې وموندئ\",\n    heroDescription: \"د ټولو ۳۴ ولایاتو د سیمه‌ییزو صنعتګرو، کروندګرو او سوداګرو سره اړیکه ونیسئ. د افغانستان اصلي محصولات مستقیماً د جوړونکو څخه واخلئ.\",\n    exploreProducts: \"محصولات وګورئ\",\n    startSelling: \"پیرودنه پیل کړئ\",\n    \n    // Categories\n    shopByCategory: \"د برخو پر بنسټ پیرودنه\",\n    exploreByProvince: \"د ولایت پر بنسټ پیرودنه\",\n    \n    // Products\n    featuredProducts: \"ځانګړي محصولات\",\n    allProducts: \"ټول محصولات\",\n    noProductsFound: \"محصول ونه موندل شو\",\n    tryDifferentSearch: \"خپل د لټون معیارونه سمبال کړئ\",\n    productsFound: \"محصول وموندل شو\",\n    productsIn: \"محصولات په\",\n    searchResults: \"د لټون پایلې\",\n    \n    // Search and filters\n    search: \"لټون\",\n    searchProducts: \"د محصولاتو لټون...\",\n    allCategories: \"ټولې برخې\",\n    allProvinces: \"ټول ولایات\",\n    category: \"برخه\",\n    location: \"ځای\",\n    priceRange: \"د بیې حد\",\n    min: \"لږترلږه\",\n    max: \"ډیرترډیره\",\n    sortBy: \"ترتیبول پر بنسټ\",\n    newestFirst: \"نوي لومړي\",\n    priceLowToHigh: \"بیه: لږ څخه ډیر ته\",\n    priceHighToLow: \"بیه: ډیر څخه لږ ته\",\n    mostPopular: \"ډیر مشهور\",\n    applyFilters: \"فلټرونه پلي کړئ\",\n    filters: \"فلټرونه\",\n    in: \"په\",\n    \n    // Post Ad\n    postNewAd: \"نوي اعلان ثبتول\",\n    adTitle: \"د اعلان سرلیک\",\n    selectCategory: \"برخه غوره کړئ\",\n    price: \"بیه\",\n    priceInAFN: \"بیه (افغانۍ/ډالر)\",\n    selectLocation: \"ځای غوره کړئ\",\n    description: \"تفصیل\",\n    adDescription: \"د اعلان تفصیل...\",\n    cancel: \"منسوخول\",\n    postAd: \"اعلان ثبتول\",\n    posting: \"په ثبتولو کې...\",\n    fillAllRequiredFields: \"لطفاً ټول اړین ساحې ډک کړئ\",\n    adPostedSuccessfully: \"اعلان په بریالیتوب سره ثبت شو!\",\n    failedToPostAd: \"د اعلان ثبتول ناکام شو. لطفاً بیا هڅه وکړئ.\",\n    \n    // Messages\n    messages: \"پیغامونه\",\n    searchConversations: \"د خبرو اترو لټون...\",\n    noConversations: \"تر اوسه خبرې اترې نشته\",\n    conversation: \"خبرې اترې\",\n    aboutProduct: \"د محصول په اړه\",\n    generalChat: \"عمومي خبرې\",\n    online: \"آنلاین\",\n    noMessages: \"تر اوسه پیغام نشته\",\n    selectConversation: \"خبرې اترې غوره کړئ\",\n    selectConversationDesc: \"د فهرست څخه خبرې اترې غوره کړئ ترڅو پیغام ورکول پیل کړئ\",\n    typeMessage: \"خپل پیغام ولیکئ...\",\n    failedToSendMessage: \"د پیغام لیږل ناکام شو\",\n    \n    // Dashboard\n    myOrders: \"زما امرونه\",\n    myProducts: \"زما محصولات\",\n    favorites: \"خوښې\",\n    settings: \"تنظیمات\",\n    noOrders: \"تر اوسه امر نشته\",\n    noOrdersDesc: \"ستاسو امرونه دلته ښکاره کیږي کله چې تاسو پیرودنه پیل کړئ\",\n    addProduct: \"محصول اضافه کړئ\",\n    noProducts: \"تر اوسه محصول نشته\",\n    noProductsDesc: \"د خپل لومړي محصول په ثبتولو سره پیرودنه پیل کړئ\",\n    noFavorites: \"تر اوسه خوښې نشته\",\n    noFavoritesDesc: \"هغه محصولات چې تاسو یې خوښوئ دلته ښکاره کیږي\",\n    accountSettings: \"د حساب تنظیمات\",\n    username: \"د کارونکي نوم\",\n    phoneNumber: \"د تلیفون شمیره\",\n    notSet: \"نه دي ټاکل شوي\",\n    noPhoneNumber: \"د تلیفون شمیره نشته\",\n    preferences: \"غوره توبونه\",\n    settingsComingSoon: \"نور تنظیمات ډیر ژر\",\n    \n    // About\n    aboutTitle: \"د افغانستان بازار ته ښه راغلاست\",\n    aboutDescription1: \"د افغانستان ترټولو لوی آنلاین بازار چیرې چې تاسو کولی شئ هر هغه څه ومومئ چې ورته اړتیا لرئ. د ودانیو او موټرونو څخه نیولې تر کورونو توکو، بریښنایی او د کار فرصتونو پورې.\",\n    aboutDescription2: \"زموږ د پرمختللي لټون سیسټم او بشپړو برخو په کارولو سره، په اسانۍ سره هغه څه ومومئ چې غواړئ.\",\n    aboutUs: \"زموږ په اړه\",\n    contactUs: \"له موږ سره اړیکه\",\n    phone: \"تلیفون\",\n    email: \"بریښنالیک\",\n    address: \"پته\",\n    addressText: \"کابل، افغانستان\",\n    socialMedia: \"ټولنیزې رسنۍ\",\n    allRightsReserved: \"ټول حقونه ساتل شوي\",\n    footerDescription: \"د افغانستان بازار د هیواد ترټولو لوی آنلاین پیرودنې او پلورنې پلیټفارم دی چې د بریښنایی سوداګرۍ په برخه کې مختلف خدمات وړاندې کوي.\",\n    \n    // Latest ad\n    latestAd: \"وروستی اعلان\",\n    \n    // General\n    success: \"بریالیتوب\",\n    error: \"تېروتنه\",\n    loading: \"په بارولو کې...\",\n    failedToLoadProducts: \"د محصولاتو بارول ناکام شو\",\n    loggedOut: \"په بریالیتوب سره وووتلاست\",\n    productsText: \"محصولات\",\n  },\n};\n","size_bytes":17273},"client/src/lib/sampleData.ts":{"content":"export const categories = [\n  {\n    id: \"textiles\",\n    name: \"Textiles & Carpets\",\n    icon: \"fas fa-tshirt\",\n    description: \"Carpets, Fabrics\",\n    productCount: 145\n  },\n  {\n    id: \"handicrafts\", \n    name: \"Handicrafts\",\n    icon: \"fas fa-palette\",\n    description: \"Art, Pottery\",\n    productCount: 89\n  },\n  {\n    id: \"jewelry\",\n    name: \"Jewelry\",\n    icon: \"fas fa-gem\", \n    description: \"Traditional, Modern\",\n    productCount: 67\n  },\n  {\n    id: \"spices\",\n    name: \"Spices & Herbs\",\n    icon: \"fas fa-pepper-hot\",\n    description: \"Saffron, Herbs\",\n    productCount: 134\n  },\n  {\n    id: \"dried-fruits\",\n    name: \"Dried Fruits & Nuts\",\n    icon: \"fas fa-apple-alt\",\n    description: \"Nuts, Raisins\",\n    productCount: 178\n  },\n  {\n    id: \"instruments\",\n    name: \"Musical Instruments\",\n    icon: \"fas fa-music\",\n    description: \"Traditional Music\",\n    productCount: 23\n  },\n  {\n    id: \"clothing\",\n    name: \"Traditional Clothing\",\n    icon: \"fas fa-hat-cowboy\",\n    description: \"Ethnic Wear\",\n    productCount: 56\n  },\n  {\n    id: \"leather\",\n    name: \"Leather Goods\",\n    icon: \"fas fa-briefcase\",\n    description: \"Bags, Accessories\",\n    productCount: 34\n  }\n];\n\nexport const provinces = [\n  {\n    id: \"kabul\",\n    name: \"Kabul\",\n    productCount: 324\n  },\n  {\n    id: \"herat\",\n    name: \"Herat\", \n    productCount: 298\n  },\n  {\n    id: \"kandahar\",\n    name: \"Kandahar\",\n    productCount: 187\n  },\n  {\n    id: \"balkh\",\n    name: \"Balkh\",\n    productCount: 156\n  },\n  {\n    id: \"nangarhar\",\n    name: \"Nangarhar\",\n    productCount: 143\n  },\n  {\n    id: \"badakhshan\",\n    name: \"Badakhshan\",\n    productCount: 98\n  },\n  {\n    id: \"ghazni\",\n    name: \"Ghazni\",\n    productCount: 87\n  },\n  {\n    id: \"bamyan\",\n    name: \"Bamyan\",\n    productCount: 76\n  },\n  {\n    id: \"farah\",\n    name: \"Farah\",\n    productCount: 65\n  },\n  {\n    id: \"kunduz\",\n    name: \"Kunduz\",\n    productCount: 54\n  },\n  {\n    id: \"takhar\",\n    name: \"Takhar\",\n    productCount: 43\n  },\n  {\n    id: \"faryab\",\n    name: \"Faryab\",\n    productCount: 39\n  },\n  {\n    id: \"baghlan\",\n    name: \"Baghlan\",\n    productCount: 37\n  },\n  {\n    id: \"parwan\",\n    name: \"Parwan\",\n    productCount: 35\n  },\n  {\n    id: \"wardak\",\n    name: \"Wardak\",\n    productCount: 32\n  },\n  {\n    id: \"khost\",\n    name: \"Khost\",\n    productCount: 29\n  },\n  {\n    id: \"laghman\",\n    name: \"Laghman\",\n    productCount: 27\n  },\n  {\n    id: \"kapisa\",\n    name: \"Kapisa\",\n    productCount: 25\n  },\n  {\n    id: \"helmand\",\n    name: \"Helmand\",\n    productCount: 24\n  },\n  {\n    id: \"kunar\",\n    name: \"Kunar\",\n    productCount: 22\n  },\n  {\n    id: \"logar\",\n    name: \"Logar\",\n    productCount: 21\n  },\n  {\n    id: \"jawzjan\",\n    name: \"Jawzjan\",\n    productCount: 19\n  },\n  {\n    id: \"badghis\",\n    name: \"Badghis\",\n    productCount: 18\n  },\n  {\n    id: \"sar-e-pol\",\n    name: \"Sar-e-Pol\",\n    productCount: 16\n  },\n  {\n    id: \"ghor\",\n    name: \"Ghor\",\n    productCount: 15\n  },\n  {\n    id: \"paktya\",\n    name: \"Paktya\",\n    productCount: 14\n  },\n  {\n    id: \"paktika\",\n    name: \"Paktika\",\n    productCount: 13\n  },\n  {\n    id: \"zabul\",\n    name: \"Zabul\",\n    productCount: 12\n  },\n  {\n    id: \"uruzgan\",\n    name: \"Uruzgan\",\n    productCount: 11\n  },\n  {\n    id: \"daykundi\",\n    name: \"Daykundi\",\n    productCount: 10\n  },\n  {\n    id: \"panjshir\",\n    name: \"Panjshir\",\n    productCount: 9\n  },\n  {\n    id: \"samangan\",\n    name: \"Samangan\",\n    productCount: 8\n  },\n  {\n    id: \"nimroz\",\n    name: \"Nimroz\",\n    productCount: 7\n  },\n  {\n    id: \"nuristan\",\n    name: \"Nuristan\",\n    productCount: 6\n  }\n];\n\n// Sample products with authentic Afghan product types\nexport const sampleProducts = [\n  {\n    id: \"1\",\n    title: \"Handwoven Herat Carpet\",\n    description: \"Traditional Afghan carpet with intricate geometric patterns, hand-woven by master craftsmen in Herat. Made with premium wool and natural dyes.\",\n    price: \"$850\",\n    category: \"Textiles & Carpets\",\n    location: \"Herat\",\n    images: [\"https://images.unsplash.com/photo-1506439773649-6e0eb8cfb237?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"],\n    createdAt: new Date().toISOString()\n  },\n  {\n    id: \"2\", \n    title: \"Premium Afghan Saffron\",\n    description: \"World's finest saffron from the valleys of Herat. Hand-picked and dried using traditional methods. Grade A quality with intense aroma and color.\",\n    price: \"$45/10g\",\n    category: \"Spices & Herbs\",\n    location: \"Herat\",\n    images: [\"https://pixabay.com/get/g314dca748a20cd6ce7130a7ed12cf7a871410c1072a2c0702d959bbff573230ae7ee3ce24b475333c4c019c888462af594fb55b00a42f29c9e2c2eb34cb69123_1280.jpg\"],\n    createdAt: new Date().toISOString()\n  },\n  {\n    id: \"3\",\n    title: \"Traditional Silver Necklace\", \n    description: \"Authentic Afghan jewelry crafted with traditional techniques. Features intricate silver work with turquoise stones, representing centuries-old Afghan craftsmanship.\",\n    price: \"$125\",\n    category: \"Jewelry\",\n    location: \"Kabul\",\n    images: [\"https://images.unsplash.com/photo-1515562141207-7a88fb7ce338?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"],\n    createdAt: new Date().toISOString()\n  },\n  {\n    id: \"4\",\n    title: \"Premium Dried Fruits Mix\",\n    description: \"Assorted dried fruits from Kandahar including almonds, raisins, pistachios, and dried apricots. Naturally dried and packed fresh.\",\n    price: \"$28/kg\", \n    category: \"Dried Fruits & Nuts\",\n    location: \"Kandahar\",\n    images: [\"https://images.unsplash.com/photo-1578662996442-48f60103fc96?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"],\n    createdAt: new Date().toISOString()\n  },\n  {\n    id: \"5\",\n    title: \"Traditional Bamyan Pottery\",\n    description: \"Handcrafted ceramic pottery with traditional blue and white patterns. Made using ancient techniques passed down through generations in Bamyan.\",\n    price: \"$85\",\n    category: \"Handicrafts\", \n    location: \"Bamyan\",\n    images: [\"https://pixabay.com/get/gfbc90b44bcc7e288b4878c0f4196d7b6c761ada17d6e462a0b183791ff8579073b8764adb4ec66fecd1b40b799e25300_1280.jpg\"],\n    createdAt: new Date().toISOString()\n  },\n  {\n    id: \"6\",\n    title: \"Handcrafted Leather Bag\",\n    description: \"Premium leather handbag crafted by skilled artisans in Ghazni. Features traditional Afghan designs and durable construction.\",\n    price: \"$145\",\n    category: \"Leather Goods\",\n    location: \"Ghazni\", \n    images: [\"https://images.unsplash.com/photo-1553062407-98eeb64c6a62?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"],\n    createdAt: new Date().toISOString()\n  },\n  {\n    id: \"7\",\n    title: \"Traditional Afghan Rubab\",\n    description: \"Authentic Afghan rubab handcrafted by master instrument makers. Features traditional wooden construction with decorative inlays.\",\n    price: \"$420\",\n    category: \"Musical Instruments\",\n    location: \"Kabul\",\n    images: [\"https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"],\n    createdAt: new Date().toISOString()\n  },\n  {\n    id: \"8\", \n    title: \"Embroidered Kuchi Dress\",\n    description: \"Traditional Afghan dress with intricate embroidery and mirror work. Authentic Kuchi style representing nomadic Afghan culture.\",\n    price: \"$95\",\n    category: \"Traditional Clothing\",\n    location: \"Balkh\",\n    images: [\"https://images.unsplash.com/photo-1583846835272-a66aba0885a6?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"],\n    createdAt: new Date().toISOString()\n  }\n];\n","size_bytes":7426},"client/src/pages/Dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport MessagesSection from \"@/components/MessagesSection\";\nimport { useLanguage } from \"@/hooks/useLanguage\";\nimport type { User } from \"@shared/schema\";\n\nexport default function Dashboard() {\n  const { t } = useLanguage();\n  const [activeSection, setActiveSection] = useState(\"messages\");\n\n  const { data: user } = useQuery<User>({\n    queryKey: [\"/api/user\"],\n  });\n\n  if (!user) {\n    return (\n      <div className=\"max-w-md mx-auto text-center\">\n        <div className=\"bg-card rounded-lg p-8 shadow-md border border-border\">\n          <i className=\"fas fa-lock text-4xl text-muted-foreground mb-4\"></i>\n          <h2 className=\"text-xl font-semibold text-foreground mb-4\">{t(\"authRequired\")}</h2>\n          <p className=\"text-muted-foreground mb-6\">{t(\"pleaseSignIn\")}</p>\n          <Link \n            href=\"/\" \n            className=\"inline-block px-6 py-3 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 transition-colors no-underline\"\n            data-testid=\"button-go-home\"\n          >\n            {t(\"goHome\")}\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      <div className=\"flex flex-col lg:flex-row gap-8\">\n        {/* Dashboard Sidebar */}\n        <div className=\"lg:w-1/4\">\n          <div className=\"bg-card rounded-lg p-6 border border-border\">\n            <div className=\"flex items-center space-x-3 mb-6\">\n              <div className=\"w-12 h-12 bg-primary rounded-full flex items-center justify-center\">\n                <i className=\"fas fa-user text-primary-foreground\"></i>\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-foreground\" data-testid=\"user-name\">\n                  {user.username}\n                </h3>\n                <p className=\"text-sm text-muted-foreground\" data-testid=\"user-phone\">\n                  {user.phoneNumber || t(\"noPhoneNumber\")}\n                </p>\n              </div>\n            </div>\n            \n            <nav className=\"space-y-2\">\n              <button\n                onClick={() => setActiveSection(\"messages\")}\n                className={`flex items-center space-x-3 p-3 rounded-md w-full text-left transition-colors ${\n                  activeSection === \"messages\"\n                    ? \"bg-primary/10 text-primary\"\n                    : \"hover:bg-muted\"\n                }`}\n                data-testid=\"nav-messages\"\n              >\n                <i className=\"fas fa-envelope\"></i>\n                <span>{t(\"messages\")}</span>\n                <span className=\"ml-auto bg-primary text-primary-foreground text-xs px-2 py-1 rounded-full\">3</span>\n              </button>\n              \n              <button\n                onClick={() => setActiveSection(\"orders\")}\n                className={`flex items-center space-x-3 p-3 rounded-md w-full text-left transition-colors ${\n                  activeSection === \"orders\"\n                    ? \"bg-primary/10 text-primary\"\n                    : \"hover:bg-muted\"\n                }`}\n                data-testid=\"nav-orders\"\n              >\n                <i className=\"fas fa-shopping-bag\"></i>\n                <span>{t(\"myOrders\")}</span>\n              </button>\n              \n              <button\n                onClick={() => setActiveSection(\"products\")}\n                className={`flex items-center space-x-3 p-3 rounded-md w-full text-left transition-colors ${\n                  activeSection === \"products\"\n                    ? \"bg-primary/10 text-primary\"\n                    : \"hover:bg-muted\"\n                }`}\n                data-testid=\"nav-products\"\n              >\n                <i className=\"fas fa-store\"></i>\n                <span>{t(\"myProducts\")}</span>\n              </button>\n              \n              <button\n                onClick={() => setActiveSection(\"favorites\")}\n                className={`flex items-center space-x-3 p-3 rounded-md w-full text-left transition-colors ${\n                  activeSection === \"favorites\"\n                    ? \"bg-primary/10 text-primary\"\n                    : \"hover:bg-muted\"\n                }`}\n                data-testid=\"nav-favorites\"\n              >\n                <i className=\"fas fa-heart\"></i>\n                <span>{t(\"favorites\")}</span>\n              </button>\n              \n              <button\n                onClick={() => setActiveSection(\"settings\")}\n                className={`flex items-center space-x-3 p-3 rounded-md w-full text-left transition-colors ${\n                  activeSection === \"settings\"\n                    ? \"bg-primary/10 text-primary\"\n                    : \"hover:bg-muted\"\n                }`}\n                data-testid=\"nav-settings\"\n              >\n                <i className=\"fas fa-cog\"></i>\n                <span>{t(\"settings\")}</span>\n              </button>\n            </nav>\n          </div>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"lg:w-3/4\">\n          {activeSection === \"messages\" && <MessagesSection />}\n          \n          {activeSection === \"orders\" && (\n            <div className=\"bg-card rounded-lg p-6 border border-border\">\n              <h2 className=\"text-xl font-semibold mb-6\">{t(\"myOrders\")}</h2>\n              <div className=\"text-center py-12\">\n                <i className=\"fas fa-shopping-bag text-6xl text-muted-foreground mb-4\"></i>\n                <h3 className=\"text-lg font-medium text-foreground mb-2\">{t(\"noOrders\")}</h3>\n                <p className=\"text-muted-foreground\">{t(\"noOrdersDesc\")}</p>\n              </div>\n            </div>\n          )}\n          \n          {activeSection === \"products\" && (\n            <div className=\"bg-card rounded-lg p-6 border border-border\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <h2 className=\"text-xl font-semibold\">{t(\"myProducts\")}</h2>\n                <Link \n                  href=\"/post-ad\"\n                  className=\"px-4 py-2 bg-primary text-primary-foreground rounded-md hover:bg-primary/90 transition-colors no-underline\"\n                  data-testid=\"button-add-product\"\n                >\n                  <i className=\"fas fa-plus mr-2\"></i>\n                  {t(\"addProduct\")}\n                </Link>\n              </div>\n              <div className=\"text-center py-12\">\n                <i className=\"fas fa-store text-6xl text-muted-foreground mb-4\"></i>\n                <h3 className=\"text-lg font-medium text-foreground mb-2\">{t(\"noProducts\")}</h3>\n                <p className=\"text-muted-foreground\">{t(\"noProductsDesc\")}</p>\n              </div>\n            </div>\n          )}\n          \n          {activeSection === \"favorites\" && (\n            <div className=\"bg-card rounded-lg p-6 border border-border\">\n              <h2 className=\"text-xl font-semibold mb-6\">{t(\"favorites\")}</h2>\n              <div className=\"text-center py-12\">\n                <i className=\"fas fa-heart text-6xl text-muted-foreground mb-4\"></i>\n                <h3 className=\"text-lg font-medium text-foreground mb-2\">{t(\"noFavorites\")}</h3>\n                <p className=\"text-muted-foreground\">{t(\"noFavoritesDesc\")}</p>\n              </div>\n            </div>\n          )}\n          \n          {activeSection === \"settings\" && (\n            <div className=\"bg-card rounded-lg p-6 border border-border\">\n              <h2 className=\"text-xl font-semibold mb-6\">{t(\"settings\")}</h2>\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"font-medium text-foreground mb-3\">{t(\"accountSettings\")}</h3>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between py-2\">\n                      <span className=\"text-sm text-muted-foreground\">{t(\"username\")}</span>\n                      <span className=\"text-sm font-medium\">{user.username}</span>\n                    </div>\n                    <div className=\"flex items-center justify-between py-2\">\n                      <span className=\"text-sm text-muted-foreground\">{t(\"phoneNumber\")}</span>\n                      <span className=\"text-sm font-medium\">{user.phoneNumber || t(\"notSet\")}</span>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"border-t border-border pt-6\">\n                  <h3 className=\"font-medium text-foreground mb-3\">{t(\"preferences\")}</h3>\n                  <div className=\"text-center py-8\">\n                    <i className=\"fas fa-cog text-4xl text-muted-foreground mb-4\"></i>\n                    <p className=\"text-muted-foreground\">{t(\"settingsComingSoon\")}</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8900}},"version":1}